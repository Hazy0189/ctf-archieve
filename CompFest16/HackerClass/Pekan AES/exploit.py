from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

# Function to simulate the encryption part of the challenge
def encrypt_message(plaintext):
    r.sendlineafter(">> ", "1")
    r.sendlineafter("Message: ", plaintext)
    r.recvuntil("Encrypted Message (hex): ")
    return r.recvline().strip().decode()

# Function to simulate the decryption part of the challenge
def get_flag(ciphertext):
    r.sendlineafter(">> ", "2")
    r.sendlineafter("Encrypted Message (hex): ", ciphertext)
    return r.recvline().strip().decode()

# Connect to the remote service (adjust host and port as necessary)
r = remote("challenges.ctf.compfest.id", 20015)

# Target plaintext containing the secret "COMPFEST16"
part1 = "COMPFEST"
part2 = "16"
#24 - flag1 - + 16 + 16
#32 - flag2 - 14 + 16
#24 - flag1 - flag2 - 14
#AAAACOMPFEST AAAAAAAAAA
#AAAAAAAAAAAA 16AAAAAAAA
# Encrypt these parts
cipher_part1 = encrypt_message('A' * (32 - len(part1)) + part1 + 'A' * 16)
cipher_part2 = encrypt_message('A' * 32 + part2 + 'A' * (16 - len(part2)))
print(cipher_part1)
print(cipher_part2)

#64
#64 x 2 = 128
#32 + 32 + 32 + 32 
crafted_ciphertext = cipher_part1[:64] + cipher_part2[64:]  # First 16 bytes of each part
print(crafted_ciphertext)
# Attempt to get the flag using the crafted ciphertext
flag = get_flag(crafted_ciphertext)
print(f"Flag: {flag}")
# Use this encrypted message to attempt to get the flag
#flag = get_flag(remote, encrypted_message)
#print(f"Flag: {flag}")

# Close the connection
r.interactive()
