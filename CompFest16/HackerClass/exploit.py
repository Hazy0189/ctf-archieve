from pwn import *
import binascii

context.log_level = 'debug'

# Connect to the remote challenge
p = remote('challenges.ctf.compfest.id', 20016)

# Prepare the input (same length as the encrypted flag)
input_text = 'A' * 44

# Receive the encrypted flag
p.sendlineafter('>> ', b'2')
enc_flag_hex = p.recvline().strip().decode().split(': ')[1]
print(enc_flag_hex)
enc_flag = binascii.unhexlify(enc_flag_hex)

# Send the input to be encrypted
p.sendlineafter('>> ', b'1')
p.sendlineafter('Message: ', str(input_text))
enc_input_hex = p.recvline().strip().decode().split(': ')[1]
print(enc_input_hex)
enc_input = binascii.unhexlify(enc_input_hex)

# XOR the encrypted flag with the encrypted input and known plaintext
# Since input_text is 'A' * len(enc_flag), the keystream can be derived directly
# XOR input with the encrypted input
keystream = xor(input_text, enc_input)

# XOR the keystream with the encrypted flag to get the original flag
flag = xor(keystream, enc_flag)

log.success(f'flag={flag.decode()}')

# Close the connection
p.close()
