from Crypto.Util.number import long_to_bytes, inverse

# Given values
p = 210937689838198368221980206027505105331
x = 10
n = p ** x
e = 65537
c = 38415069832658278102412940476349224522223117826717864236716063942465292251639452037471899276433883280487660575851320701796429668476551053062015248611453285019543570394965516221325993414456754832832080360042304547277452474428650298929639938371072386565545457564351801474854761480051602266412901190322297685878637385354294132832534425751762322767659303351614194618177802401960510283943

# Compute Ï†(n)
phi_n = p**(x-1) * (p-1)

# Compute the private key exponent d
#d = inverse(e, phi_n)
d = pow(e, -1, phi_n)
# Decrypt the ciphertext
m = pow(c, d, n)
print(bytes.fromhex(hex(m)[2:]))
#message = long_to_bytes(m)

#print("Decrypted message:", message.decode())
