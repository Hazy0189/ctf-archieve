from pwn import *

# Prepare the binary to execute
exe = './soal'  # Replace with the actual binary name

# Prepare a list of 100 valid serials
valid_serials = []
base_serial = "ABCD-EFGH-CF16-IJKL-MNOP"

def generate_random_serial():
    part1 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    part2 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    part3 = "CF16"  # This is fixed as per the challenge constraints
    part4 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    part5 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))    
    serial = f"{part1}-{part2}-{part3}-{part4}-{part5}"
    return serial

# Prepare a list of 100 unique serials
valid_serials = set()
while len(valid_serials) < 100:
    serial = generate_random_serial()
    if serial not in valid_serials:
        valid_serials.add(serial)

# Start the process
#io = process(exe)
io = remote('challenges.ctf.compfest.id', 20012)
# Send the serials one by one
for serial in valid_serials:
    io.sendlineafter("==> ", serial)

# After 100 valid inputs, the flag should be printed
io.interactive()  # This should give control to view the flag output

# Close the process
io.close()
