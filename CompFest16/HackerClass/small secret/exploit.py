from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes
import owiener

# Given RSA parameters
n = 4343181431018200306551934767651740434698197697113054708645833834136507352526415886520288547842511292184443469018500774366124208475728287550710509139311991
e = 990392646460034135448171148543952400451416256633912637496937644405710261537403000592902653902423256951347857173056999413638412612185130835028620999928903
c = 79203839707597357456095115220720812537064056637017832867021677647242116974855711501919695341014184758746900399710417605865392358809039924384193670071524

# Use Wiener's attack to find the private key 'd'
d = owiener.attack(e, n)

if d is None:
    print("Failed to find the private key using Wiener's attack.")
else:
    # Decrypt the ciphertext
    m = pow(c, d, n)
    # Convert the message from integer to bytes
    message = long_to_bytes(m)
    print(f"Decrypted message: {message.decode()}")
