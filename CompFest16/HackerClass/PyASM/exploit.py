from z3 import *

def solve_password():
    # Define a BitVec for each character in the password (assuming 9 characters, each 8 bits)
    pw = [BitVec(f'pw{i}', 32) for i in range(9)]
    
    s = Solver()

    # Add constraints that each character must be alphanumeric (isalnum condition)
    for i in range(9):
        s.add(And(pw[i] >= ord('0'), pw[i] <= ord('z')))
        s.add(Or(And(pw[i] >= ord('0'), pw[i] <= ord('9')),
                 And(pw[i] >= ord('A'), pw[i] <= ord('Z')),
                 And(pw[i] >= ord('a'), pw[i] <= ord('z'))))

    # Define x array as in the code, reverse-order of pw (but note we subtract the index)
    x = [BitVec(f'x{i}', 32) for i in range(9)]
    for i in range(9):
        s.add(x[len(x) - i - 1] == pw[i])

    # Add all the constraints from the original problem
    s.add(x[7] + 69 == 120)
    s.add(x[3] ^ 1337 == 1355)
    s.add(x[0] / 22 == 5)
    s.add(x[4] - 16 == 35)
    s.add(x[8] << 3 == 832)
    s.add(x[1] * x[1] == 9409)
    s.add(x[6] * 7 == 693)
    s.add(~x[2] == -110)
    s.add(x[5] == 107)

    if s.check() == sat:
        model = s.model()
        password = ''.join([chr(model[pw[i]].as_long()) for i in range(9)])
        print(f'Solved Password: {password}')
    else:
        print('No solution found.')

solve_password()
