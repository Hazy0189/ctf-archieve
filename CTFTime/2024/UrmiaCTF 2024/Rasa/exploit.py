from Crypto.Util.number import GCD, long_to_bytes, bytes_to_long

# Given values
c1 = 4936633143250099145681291328210001176670359282546365786292865384622623361917110615562758660249052523031506088031700534616606749381625728677237156077617826946875709884450395542780430312659290677772295937476148531787640370697669307849964423347138244267351336993740071512677413967434174012186875518514690404901438236513973973395253840690000166777131214571393320611453097925692591851223326058542960514875484643852157917652871230480556241497368576832917365259103114474725832240988095092805553314611077752110183073117538171055377471224283460770171715772867976004611438041214829527591840481131799601637619379905899583860712
c2 = 4249331536346418460740685788906543925055782403358018301375515791080675882438975807411393426018555834858225200534436826327143112782412976181064308114143610230808152454979956336163181387394297190117506455826589435279580099443952129127333797498819113173051369150785544385865084642580220593149922403491429455092325552294004240140132984526281327416220424446699283709195243151544057883172103044629176938001704498969174450112983641950977449501500123793579066569108384601438382737438759665028964888855650246036617753485994755112223716040976552625303149225846444715069544294992357019251748194377109635699409363098856124503699

# Known messages
m1 = bytes_to_long(b'There were a mysterious underground cemetery found in Tabriz about 10 years ago near Blue Mosque while worker were digging in nearby locations')
m2 = bytes_to_long(b'It is an unknown cemetry which no historical records have registered it so far and it still remains a mystery for everyone. Can you help recover the secrets behind it?')

# Attempt to recover n using GCD
potential_n = GCD(c1 - pow(m1, 3), c2 - pow(m2, 3))

print(f"Recovered potential n: {potential_n}")

# Check if potential_n is likely the correct n by verifying conditions
if pow(m1, 3, potential_n) == c1 and pow(m2, 3, potential_n) == c2:
    print(f"Successfully recovered n: {potential_n}")
    n = potential_n
else:
    print("Failed to recover n correctly.")

c3 = 4787730241430407816296391985321087885201370459144782639526466882754388923528184628791272849631052410285220886389167214674630256805522835914688042548573626544377485769841886945444459876619789728367069642352268475748536583963023522112592993980785323816295341827344428122526603444607716141518774871446218667618421223737290165550770412688789619499529376265486836452146361577425118214998254432061719598918843214075420099737330174389738219425742513859924405512134177840243888506903615520834351259404535422900496211231416550898788627764973097843838005700761898234670278519963815795607630007649490013904165159258781137615552
c4 = 113853085592314229610057343788641880655891250427192578969753251544147449953199573591088659415009844978594734104944672086567536305628603582050894135670233009762019371733407446723867335589702887825100467744887937813587982148481739185877044985898927930604908042166328371077554586238105449762553659899420117810500522089687710757086460435245873020822270761629087884311667866993927962976808946115928598470754875980383790845489200805783304924769488036699713713161371066099847782788173089390687106687733633630013935758733014765989697270620709766398298734385710754514139112019541573165601226954169390363781943939505248469355
e1 = 0x10001
e2 = 0x8001

def extended_gcd(a, b):
    x0, x1, y0, y1 = 1, 0, 0, 1
    while b != 0:
        q, a, b = a // b, b, a % b
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    return a, x0, y0

# Calculate coefficients s1 and s2
gcd, s1, s2 = extended_gcd(e1, e2)

# Adjust ciphers based on the sign of s1 and s2
if s1 < 0:
    c3 = pow(c3, -s1, n)
    c3 = pow(c3, -1, n)  # Mod inverse since s1 is negative
else:
    c3 = pow(c3, s1, n)

if s2 < 0:
    c4 = pow(c4, -s2, n)
    c4 = pow(c4, -1, n)  # Mod inverse since s2 is negative
else:
    c4 = pow(c4, s2, n)

# Recover m from the modified ciphers
m = (c3 * c4) % n

# Convert the long integer back to bytes to get the flag
flag = long_to_bytes(m)
print(f"Recovered flag: {flag}")
