from Crypto.Util.number import long_to_bytes, inverse

# Given values
n = 19941761574905742888287481436741891092124181365374951557784462831976463640107265018634834348445714890239773671635245721007690323617473110640838905137749040079027523456576873242576882348266023282328418714706775196352487380997352642934338999701240803315143633815388891936049690566875086476878846288179053430346474607507140036260924419560806005408849547824680623840905827643373832321736642361809029363098769822048159935628385558949380403530181068302284344450193809037352292218892697094260257903235373427839438588016417069626966199168116250816624950794879795025563625197229849548571880188149181610538268071041049047969843
e = 65537
p = 141215302198117831625062864040488799070519720517200041108428144553545151598056768261249804591039619563427429432774864846431648576756532204385570644513881377399176360191752553530461890049438561464940760188273504330998813264974135649979472954395545506855735753302212710905410503554080274040723801092443415762179
q = 141215302198117831625062864040488799070519720517200041108428144553545151598056768261249804591039619563427429432774864846431648576756532204385570644513881377399176360191752553530461890049438561464940760188273504330998813264974135649979472954395545506855735753302212710905410503554080274040723801092443415763217
C = int("19884857528166034194290354901025594547806401534797199549580543708532212531494632428055499138843523751957005738044894685860481662931551960621390631298434633050540355913401713821919702972642244121105189212488383052634514542718912769480579081471731152464650132606046581540616642016627941035016241596730862645447447571127721458637731806036686864624004097100207773539304392234840729042840767039997395315211803763621246672310876625311211274710089635086349825580201804347380144554074800132708339497620161659452151212806639994177512127235920012893886522385616218483464075257945830394483951539176790009646364555199532294580000")

# Calculate phi(n) and the private key exponent d
phi_n = (p - 1) * (q - 1)
d = inverse(e, phi_n)

# Brute force over possible C values
def brute_force_c(start, end):
    for X in range(start, end):
        print(X)
        try:
            # Decrypt C and convert to bytes
            m = pow(C+X, d, n)
            plaintext = long_to_bytes(m)

            # Check if 'H7CTF' is in the plaintext
            if b'H7CTF' in plaintext:
                print(f"Found C: {C}")
                print(f"Decrypted message: {plaintext.decode('utf-8', errors='ignore')}")
                break
        except Exception as ex:
            # Continue on any errors (e.g., invalid ciphertext values)
            pass

# Define the range to brute force
  # Arbitrarily chosen to run over a small range

# Run brute force
brute_force_c(8188, 9999)
