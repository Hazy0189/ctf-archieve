from Crypto.Util.number import *

# Given values from the problem
N = 13172635138210286640933237746072073728198869440440273861514688422430115450596963502627269613634657978751692320585777768877613321668778514462972611542147278205792418292362109100597755668571861738781190210255903465162483813897653948305531342676537057130369323555420200545974179860718822410192595079238246216026529376260568656408216009127973127738250617629330070723654601189310430802429585919291621479622419163092371272056180409609142738265178224163465585013019636286435078812898907472859171136422659050412212315590509027225331104292443193693974638004592849794819591007103879538185323581422819852185166422985403024630123
ct1 = 8499526321488266762028127474977263983474334713646962923180757984708039537289636737028409522654349845032612940144246996001396064450188534247830979105036627472087587636695469693411422088223080856169980341928057477564688506588678465277896123712776169270866525885072607021419929184184301722442524104467963680432737243478200661224741027413690099507128782156810842444314483076587935222998920241102484844741597333281611874849648935849985954902264102662618041817365284648356127737145896858259709819593359264714426125676691235985164360773645489923563993927995838346085066937602961724919392025887999986486672200850129835569774
ct2 = 2263178005282615069738169250508811825030372342139636879043114251227029802177975391784856426659871916802959302578620910469427367218786299839311310420522660987052055310279591316813828952756984548230575321772825193775083404279028090110850848262192595930920326368607665856808251531130234210906413358662814500632504899088517752958423466186872534450108628371006268110210630017230741670440780982809417986017372337888735465439382827207990030719121834402226087906249993820193417658352914727984318783025375497623944699995700474418221251293446038111913247755996471673024017921092527032486774115935601292346440934530921157935322
e = 65537

# 1. Use the Extended Euclidean Algorithm to find a, b such that:
#    a*e + b*(N+1) = 1
# This can be done by finding the modular inverse of e mod (N+1) for 'a',
# and then calculating 'b'.
def extended_gcd(a, b):
    if a == 0:
        return (b, 0, 1)
    g, y, x = extended_gcd(b % a, a)
    return (g, x - (b // a) * y, y)

g, a, b = extended_gcd(e, N + 1)

if g != 1:
    print("Error: gcd(e, N+1) is not 1. This method fails.")
else:
    # 2. Calculate msg = (ct1^a * ct2^b) mod N
    # We must handle potential negative exponents by using modular inverses.
    
    # Calculate ct1^a mod N
    if a < 0:
        term1 = pow(inverse(ct1, N), -a, N)
    else:
        term1 = pow(ct1, a, N)

    # Calculate ct2^b mod N
    if b < 0:
        term2 = pow(inverse(ct2, N), -b, N)
    else:
        term2 = pow(ct2, b, N)
        
    # 3. Combine the terms and convert from long to bytes
    msg_long = (term1 * term2) % N
    flag = long_to_bytes(msg_long)
    
    print(f"Recovered Flag: {flag.decode()}")